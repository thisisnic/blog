<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Dr Nic Crane</title>
<link>https://niccrane.com/blog.html</link>
<atom:link href="https://niccrane.com/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Tue, 09 Sep 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Taming Messy Survey Data with Arrow</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/pums-arrow/</link>
  <description><![CDATA[ 





<p>Earlier this year, the <a href="https://arrowrbook.com/">book</a> that I co-authored with Jon Keane and Neal Richardson, Scaling Up with R and Apache Arrow was published by CRC. It was a joy to write this book, though a lot of hard work, and one of the big choices we need to make was what dataset we were going to use.</p>
<p>It’s been said many times that data cleaning makes up 80% of data science, and this was reflected in our own experiences in the industry. While many tutorials start with perfectly cleaned up data to focus solely on concepts, we felt that this doesn’t reflect real-world conditions, and even more so for large datasets.</p>
<p>We wanted to the examples in the book to reflect our readers’ day-to-day challenges, and so we decided to work with the US Census Bureau’s Public Use Microdata Sample (PUMS) dataset, containing data from the <a href="https://www.census.gov/programs-surveys/acs.html">American Community Survey (ACS)</a>.</p>
<p>While it’s common to work with aggregated survey data, the PUMS dataset differs in that it contains individual-level records. It’s a bit more complicated than this - there’s weighting to account for too due to how the data in anonymised - but effectively it’s a massive dataset which samples 1% of the US population per year.</p>
<p>In this blog post, I’m going to outline the specific steps we needed to take to make the raw PUMS dataset analysis-ready, and where we used Arrow and Parquet in that process.</p>
<p>You can find the full processing code <a href="https://github.com/arrowrbook/book/tree/main/pums_dataset">here</a>. Huge thanks to Jon who did most of the work on prepping the data for the book!</p>
<section id="step-1.-downloading-and-unzipping-the-data" class="level2">
<h2 class="anchored" data-anchor-id="step-1.-downloading-and-unzipping-the-data">Step 1. Downloading and unzipping the data</h2>
<p>The final dataset we assembled covers years 2005-2022. There are multiple versions available for many years - 1, 3, and 5 year estimates, and we used the 1 year estimates. Data for the year 2020 is missing since that year’s data was only released in 5-year estimates due to COVID.</p>
<p>The raw data was retrieved from <a href="https://www2.census.gov/programs-surveys/acs/data/pums/">the Census’s FTP site</a> and the values to recode categorical and string data was retrieved from the Census’s API (via the <code>censusapi</code> R package).</p>
<p>Even at the point of downloading the original data, we faced a few challenges due to the fact that the structure of the original data is not uniform; recording and storing methods changed.</p>
<p>A few of the attributes of the data:</p>
<ul>
<li>There are 1, 3, and 5 year versions of the survey</li>
<li>The data for 2000 - 2006 are in the root directory for that year, but other years have subdirectories depending on whether the 1, 3, or 5 year version</li>
<li>Puerto Rico data only started from 2004 onwards</li>
<li>The data dictionaries are only available from 2005 onwards</li>
</ul>
<p>The download script accounts for these, and sets a two hour timeout to account for slow connections.</p>
<p>Time taken to download the entire dataset?</p>
<!-- add this here! -->
</section>
<section id="step-2.-recoding-the-data" class="level2">
<h2 class="anchored" data-anchor-id="step-2.-recoding-the-data">Step 2. Recoding the data</h2>
<p>We needed to do some significant recoding of the data itself to ensure that it was consistent.</p>
<p>One of the trickier aspects of working with multi-year PUMS data is that the same variable doesn’t always stay the same from year to year. For example, <code>WKW</code> (“Weeks Worked Last Year”) is literally a numeric count in 2005, but in later years it’s a categorical code with values like “50 to 52 weeks”. If you just bind the years together, Arrow (or any other parser) will complain, because the column can’t be both integer and string at the same time. There were numerous similar examples in the data, and so it was recoded with the following general principles:</p>
<ul>
<li>For string values, if there were less than or equal to 10 unique values, we converted these to factors.</li>
<li>For string values, if there were more than 10 unique values, we converted these to strings.</li>
<li>We used integer or floats for values that were numeric in nature, and recoded special values (<em>e.g.</em> variable <code>RETP</code> “Retirement income past 12 months” where a value of -1 means “N/A (Less than 15 years old)”) that are missing-like as <code>NA</code></li>
<li>If there were codes that broadly corresponded to <code>TRUE</code> and <code>FALSE</code> (e.g.&nbsp;“yes” and “no”), these were converted into booleans</li>
<li>Re-pad codes that sometimes had leading zeros</li>
<li>Detect when a variable had switched type (e.g.&nbsp;<code>WKW</code> numeric one year, categorical the next) and recode to match</li>
</ul>
<p>When we read each CSV, we used Arrow schemas to force the correct column types before applying our recoding rules. Arrow’s CSV reader was fast enough to let us loop through hundreds of files relatively easily, and once recoded, we immediately wrote the results back out to Parquet.</p>
</section>
<section id="step-3.-repartitioning-and-more-cleaning" class="level2">
<h2 class="anchored" data-anchor-id="step-3.-repartitioning-and-more-cleaning">Step 3. Repartitioning and more cleaning</h2>
<p>At this point, there was still more work to be done, but now we were working with cleaned up Parquet files, the process became much simpler.</p>
<p>We still had columns we wanted to relabel; in <a href="https://arrowrbook.com/data_manipulation.html#relabeling-values">Chapter 3</a> we talk about variables with values which had remained roughly the same, but with slightly different labels; for example, a possible response to whether the respondent was a US citizen changed from “Yes, naturalized” in 2005 to “U.S. citizen by naturalization” in 2021. These values needed to be relabelled so that they matched, but this process was significantly simpler now it could be done working in Arrow with lazily-evaluated queries on Parquet datasets, instead of reading the files into memory.</p>
<p>We also needed to repartition the data - split it out into subdirectories. Repartitioning works best when you know the typical ways in which you’re going to filter your data. We ended up writing <a href="https://arrowrbook.com/datasets.html#how-partitioning-affects-performance">a whole section in the book</a> showing how various partitioning strategies affected speed for different queries.</p>
</section>
<section id="step-4.-analysis" class="level2">
<h2 class="anchored" data-anchor-id="step-4.-analysis">Step 4. Analysis</h2>
<ul>
<li>Why Arrow helped - massively shrank the dataset size (show original size -&gt; new size)</li>
<li>Speed of analysis</li>
<li>Show a nice end-to-end example which ends up with plots</li>
</ul>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<ul>
<li>Messy data is the norm, not the exception.</li>
<li>Arrow gave us the control (schemas) and the output format (Parquet) to make messy data usable.</li>
<li>Working with messy survey data in the book was deliberate — it teaches readers real workflows, not toy pipelines.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>Arrow</category>
  <guid>https://niccrane.com/posts/pums-arrow/</guid>
  <pubDate>Tue, 09 Sep 2025 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/pums-arrow/scaling_up.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using ChatGPT as a Code Tutor: A One-Hour Learning Experiment</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/llms_for_learning/</link>
  <description><![CDATA[ 





<p>There’s a lot of advice out there at the moment about using LLMs for code generation, but something I’ve been curious about is using LLMs for learning <em>around</em> code.</p>
<p><strong>Specifically, I don’t want to rely on LLMs to generate the answers for me every time; I want LLMs to help me gain skills so that next time I can generate the right answer myself.</strong></p>
<p>In this blog post I’m going to talk about using an LLM, specifically, ChatGPT to extend my own knowledge in R.</p>
<section id="context---adding-a-feature-to-daisyuiwidget" class="level2">
<h2 class="anchored" data-anchor-id="context---adding-a-feature-to-daisyuiwidget">Context - adding a feature to daisyuiwidget</h2>
<p>I’m currently collaborating with Charlotte Hadley on an R package called <a href="https://github.com/thisisnic/daisyuiwidget/">daisyuiwidget</a>, which is a <a href="https://www.htmlwidgets.org/">htmlwidgets</a> package.</p>
<section id="htmlwidgets" class="level3">
<h3 class="anchored" data-anchor-id="htmlwidgets">htmlwidgets</h3>
<p>Charlie and I both really love htmlwidgets, which are used to wrap JavaScript libraries and work with them from R. They can be used in HTML outputs like Quarto documents and Shiny apps.</p>
<p>One example of a htmlwidgets package is <a href="https://rstudio.github.io/DT/">DT</a>, which can be used to create interactive tables. You can see an example below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DT)</span>
<span id="cb1-2"></span>
<span id="cb1-3">packages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"htmlwidgets"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leaflet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plotly"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DT"</span>),</span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first_release =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-12-09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-06-24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-11-17"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2015-06-09"</span>)</span>
<span id="cb1-6">    )</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(packages)</span></code></pre></div>
<div class="cell-output-display">
<div class="datatables html-widget html-fill-item" id="htmlwidget-45396683e44f8f7148ff" style="width:100%;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-45396683e44f8f7148ff">{"x":{"filter":"none","vertical":false,"data":[["1","2","3","4"],["htmlwidgets","leaflet","plotly","DT"],["2014-12-09","2015-06-24","2015-11-17","2015-06-09"]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>package<\/th>\n      <th>first_release<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"columnDefs":[{"orderable":false,"targets":0},{"name":" ","targets":0},{"name":"package","targets":1},{"name":"first_release","targets":2}],"order":[],"autoWidth":false,"orderClasses":false}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>One of the excellent features about packages like DT is that they can go beyond just displaying outputs. If you include a DT table in a Shiny app and have enabled “row selection”, then the JavaScript code for the table can pass the index of the user’s selected row back to R. This then can be used in other components of the app, for example, displaying information relevant to the user’s selection.</p>
</section>
<section id="daisyuiwidget" class="level3">
<h3 class="anchored" data-anchor-id="daisyuiwidget">daisyuiwidget</h3>
<p>The goal with daisyuiwidget is to create a new htmlwidgets package, using LLMs - we’ll be talking more about this in our joint presentation at <a href="https://shiny-in-production.jumpingrivers.com/">Shiny in Production</a> later on this year.</p>
<p>We decided to create a wrapper for the daisyUI library which has a feature where it can be used to create <a href="https://daisyui.com/components/timeline/?lang=en">timelines</a> like the one below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/llms_for_learning/daisyuitimeline.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The project was at the point where the package successfully created a timeline from a data.frame input. The <a href="https://github.com/thisisnic/daisyuiwidget/issues/8">next task</a> for me to do was implement the functionality for timeline event selection, with the goal that when a user clicks on an event in the timeline, an input variable in R is updated, which then can be hooked up to other bits of Shiny reactivity.</p>
<p>This is what I’ll be discussing below - how I got ChatGPT to help with this, but with helping me learn how to do it myself, and not just getting the LLM to write the code.</p>
</section>
</section>
<section id="aside---the-stretch-zone" class="level2">
<h2 class="anchored" data-anchor-id="aside---the-stretch-zone">Aside - the stretch zone</h2>
<p>I’m going to be talking at <a href="https://posit.co/conference/">Posit Conf</a> about increasing productivity with LLMs and a central thesis of my talk is the idea that LLMs are most useful when working on tasks just outside of your <a href="https://en.wikipedia.org/wiki/Comfort_zone">comfort zone, sometimes described as your stretch zone</a>.</p>
<p>I’m defining the “stretch zone” in this context as something that isn’t within your current knowledge, but doesn’t seem so challenging that you have doubts about whether you can find a solution.</p>
<p>This task seemed like a great fit for this in terms of my past experience:</p>
<p>✅ Extensive Shiny app development experience</p>
<p>✅ Experience using row selection in DT-based apps to update other components</p>
<p>✅ Some JavaScript experience</p>
<p>❌ Very limited experience of how to implement htmlwidgets package from scratch</p>
<p>❌ Never implemented Shiny reactivity for UI components before</p>
</section>
<section id="learning-with-llms" class="level2">
<h2 class="anchored" data-anchor-id="learning-with-llms">Learning with LLMs</h2>
<p>I’d been reading a paper by Dr Xi Lin about the idea of using LLMs in self-directed learning.</p>
<blockquote class="blockquote">
<p>Lin, X. (2023). Exploring the Role of ChatGPT as a Facilitator for Motivating Self-Directed Learning Among Adult Learners. Adult Learning, https://doi.org/10.1177/10451595231184928</p>
</blockquote>
<p>Dr Lin discusses a self-directed learning framework proposed by Kim et al (2014) with the following aspects:</p>
<ol type="1">
<li>Establishing Learning Goals</li>
<li>Locate and Access Resources</li>
<li>Adopt and Execute Learning Activities</li>
<li>Monitor and Evaluate Performance</li>
<li>Reassess Learning Strategies</li>
</ol>
<p>This framework can be used with ChatGPT to help support adult learners, and Dr Lin goes on to walk through a hypothetical example where an adult learner is using ChatGPT in each of those steps and discusses the kind of help that could be given.</p>
<p>I wanted to try some of this out, and so I created LLM summaries of each of the steps including Dr Lin’s suggestions of how an LLM might implement them, and used these summaries as prompts in a learning session with ChatGPT. I focused solely on steps 1 to 3 as the learning goal was an individual task rather than an ongoing programme.</p>
</section>
<section id="step-1---establish-learning-goals" class="level2">
<h2 class="anchored" data-anchor-id="step-1---establish-learning-goals">Step 1 - Establish Learning Goals</h2>
<p><strong>Duration: 7 minutes</strong></p>
<p>I wrote a little context about what I was trying to achieve, and pasted that and my summary of step 1, into ChatGPT.</p>
<p>ChatGPT asked me five questions:</p>
<ul>
<li>what my goals were</li>
<li>my past experience</li>
<li>exactly what it was that I was trying to achieve</li>
<li>my preferred end state</li>
<li>how long I wanted to spend working on this</li>
</ul>
<p>It took my answers and generated a primary learning goal with supporting objectives.</p>
<blockquote class="blockquote">
<p><strong>Primary Learning Goal:</strong></p>
<p>Within the next few hours, I want to understand and implement the necessary code to make my existing <code>htmlwidget</code> timeline respond to user interaction in a Shiny app—specifically, capturing a selected event and updating a variable on the server side.</p>
<p><strong>Supporting Objectives:</strong></p>
<ul>
<li>Identify how event selection can be captured in JavaScript and passed to Shiny via <code>Shiny.setInputValue()</code>.</li>
<li>Modify the widget’s JS code to emit a Shiny input when a user selects an event.</li>
<li>Test and verify that the input value is received in Shiny and reflects the expected event ID or index.</li>
<li>Write a minimal working Shiny app that uses the widget and displays the selected event value.</li>
</ul>
</blockquote>
<p>I feel that the value I got here from incorporating ChatGPT was <em>clarity</em>. The resulting learning goal was more precise than my original stated aim, and the supporting objectives made for concrete steps to aim for in pursuit of the overall goal.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand to view full conversation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I am looking at how I can get LLMs to help me with a coding task as an intelligent tutor and not just solve the problem for me. My first step is establishing a learning goal or goals. Using the brief below, ask me questions one at a time to help me work out a small set of goals in this exercise.</p>
<p>Establish learning goals</p>
<p>When establishing goals for self-directed learning, it’s most important for learners to set SMART goals: Specific, Measurable, Achievable, Relevant, and Time-bound. This approach helps adult learners identify clear learning objectives and stay focused on achieving them.</p>
<p>Goals should be personalized and align with the learner’s interests, motivations, and expected learning outcomes. It’s crucial to break down broader objectives into smaller, manageable tasks to make them more achievable.</p>
<p>Additionally, learners should consider how their goals relate to their personal and professional contexts, ensuring relevance. Setting a realistic timeline for accomplishing these goals is also essential.</p>
<p>While learners can use tools like ChatGPT to assist in goal-setting, it’s important to remember that the quality of recommendations depends on the information provided by the learner. Therefore, clear communication of interests, motivations, and expectations is crucial when using such tools.</p>
</div>
<div class="chatgpt-llm">
<p>Let’s start by grounding this in why you’re doing it.</p>
<p>Question 1: What’s your motivation for using LLMs as a tutor rather than a problem-solver—what do you hope to gain from this approach (e.g., deeper understanding, confidence, skill retention, etc.)?</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I want to understand how I can take an R package which creates a htmlwidget and adds the correct code so that I can use it in a shiny app and update a variable based on what the user has selected. I want to learn how to do this as I think it’s a useful skill to have. I don’t want an LLM to do it as I won’t know if the code is correct or not and would only have surface level understanding and so would be hard to repeat the skill in future.</p>
</div>
<div class="chatgpt-llm">
<p><strong>Question 2:</strong></p>
<p>Where are you starting from? For example:</p>
<ul>
<li>Have you ever written your own <code>htmlwidget</code> package from scratch</li>
<li>Do you already have a specific widget/package in mind?</li>
<li>Have you previously connected any JS-based input to Shiny reactivity?</li>
</ul>
<p>(Just answer what’s true for you—this is to calibrate the scope of your learning goal.)</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I have never written an htmlwidget package from scratch although I do have one I’ve written with an LLM that I’d like to add this functionality to. It creates the widget but doesn’t have the shiny functionality yet. I’ve not done much of this connectivity before, though have worked with packages that implement it themselves.</p>
</div>
<div class="chatgpt-llm">
<p>That gives us a baseline. You’ve got a partial <code>htmlwidget</code> and prior exposure to packages that do this right, but you haven’t yet wired up JS-to-R reactivity yourself.</p>
<p><strong>Question 3:</strong></p>
<p>What exactly do you want the user to <em>select</em> in your widget, and what kind of R-side variable or behavior do you want to <em>update</em> in response? (Try to be concrete—e.g., “user clicks on a bar in a chart, I want to update a <code>reactiveVal()</code> in the server with the bar’s label.”)</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>So the widget display a timeline of events and I want the user to select an event, and some variable updates. I’ve seen similar functionality in the DT package where the user clicks on a row in a table, and some variable tracks which row is selected and the data from that row. I can’t remember exactly what data it tracks, it could just be the row number and then the user can write a function to extract the data from an underlying data.frame; this is fine too.</p>
</div>
<div class="chatgpt-llm">
<p>Perfect—this is concrete enough.</p>
<p>You want to let the user select an <em>event</em> from a timeline displayed via your <code>htmlwidget</code>, and capture that selection in the Shiny server logic—ideally as an index or ID you can work with to retrieve more data.</p>
<p><strong>Question 4:</strong></p>
<p>What’s your ideal end state for this learning exercise? For example:</p>
<ul>
<li>Do you want to be able to reproduce this pattern in other widgets you make?</li>
<li>Are you aiming to read or modify similar functionality in other packages?</li>
<li>Or is this just about getting <em>this one</em> widget working?</li>
</ul>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>It’s about getting this one working, although I would like to be able to do it again if I ever make another htmlwidgets package.</p>
</div>
<div class="chatgpt-llm">
<p>Got it. So the primary goal is getting this specific widget working, and a secondary goal is gaining enough understanding to repeat the pattern if needed.</p>
<p><strong>Question 5:</strong></p>
<p>What’s your time horizon? Do you want to finish this within a day, a week, or are you treating it as an open-ended background task?</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I’d like to finish this within a few hours and not overcomplicate it</p>
</div>
<div class="chatgpt-llm">
<p>Good. A short, focused goal with an emphasis on practical understanding.</p>
<p>Here’s a draft of your SMART-aligned learning goals based on what you’ve said:</p>
<hr>
<p><strong>Primary Learning Goal:</strong></p>
<p>Within the next few hours, I want to understand and implement the necessary code to make my existing <code>htmlwidget</code> timeline respond to user interaction in a Shiny app—specifically, capturing a selected event and updating a variable on the server side.</p>
<p><strong>Supporting Objectives:</strong></p>
<ul>
<li>Identify how event selection can be captured in JavaScript and passed to Shiny via <code>Shiny.setInputValue()</code>.</li>
<li>Modify the widget’s JS code to emit a Shiny input when a user selects an event.</li>
<li>Test and verify that the input value is received in Shiny and reflects the expected event ID or index.</li>
<li>Write a minimal working Shiny app that uses the widget and displays the selected event value.</li>
</ul>
<hr>
<p>Do you want to adjust or narrow any part of that before we move to designing how the LLM will help you stay in tutor mode for this?</p>
</div>
</div>
</div>
</div>
</section>
<section id="step-2---locate-and-access-resources" class="level2">
<h2 class="anchored" data-anchor-id="step-2---locate-and-access-resources">Step 2 - Locate and Access Resources</h2>
<p><strong>Duration: 11 minutes</strong></p>
<p>The second stage was identifying resources for learning.</p>
<p>It started smoothly - ChatGPT asked me if I preferred to learn by reading, watching, or doing, and when I replied “doing” it assured me that it would find code-first resources with working examples - great!</p>
<p>It gave me some options about kinds of examples I was interested in, and asked which htmlwidgets packages I was more familiar with so we could use those as examples to look at. At this point it suggested some initial links, but 2 out of the 3 didn’t actually work.</p>
<p>When I complained about this, it gave me some code examples to try out, which I pushed back on, stating I wanted resources to learn from and not ChatGPT-generated code,</p>
<p>At this point, it gave me a list of resources, divided into categories and a summary of what it had provided. The links supplied here did all work this time, but there was too much information, and a real risk of overwhelm.</p>
<p>I began to skim through a few articles, before I remembered that the aim of this step was only to identify resources, and not to deep dive into them quite yet, and so instead I moved onto the next step.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand to view full conversation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>Now the next thing I need to do it find learning resources. Here are the notes I have.</p>
<ol start="2" type="1">
<li>Locate and access resources</li>
</ol>
<p>When it comes to locating and accessing resources for self-directed learning, the most important things to know are:</p>
<p>Adult learners often struggle with finding available resources, particularly interactive and multimedia materials. This challenge can be a significant barrier to effective self-directed learning.</p>
<p>Learners should proactively identify a variety of resources beyond those provided by instructors. These can include online articles, videos, multimedia resources, books, journals, publications, blogs, and social media groups related to their learning objectives.</p>
<p>Tools like ChatGPT can assist in recommending relevant external resources based on personalized learning plans. However, learners should be cautious and verify the information provided by such tools.</p>
<p>It’s crucial to develop skills in searching for and accessing information, as insufficient technical skills can hinder this process. Improving these skills is an important part of self-directed learning.</p>
</div>
<div class="chatgpt-llm">
<p>Let’s approach this systematically.</p>
<p><strong>Question 1:</strong></p>
<p>Do you learn better by reading, watching, or doing?</p>
<p>(That’ll help decide whether to focus on docs, code examples, videos, interactive tutorials, etc.)</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I learn best by doing</p>
</div>
<div class="chatgpt-llm">
<p>Great—so you’ll want code-first resources, ideally with small working examples you can tinker with.</p>
<p><strong>Question 2:</strong></p>
<p>What kind of prior art do you want to learn from? For example:</p>
<ul>
<li>Existing <code>htmlwidgets</code> that support Shiny inputs (like <code>DT</code>, <code>leaflet</code>, <code>plotly</code>)?</li>
<li>General tutorials on writing <code>htmlwidgets</code>?</li>
<li>Tutorials or examples specifically about integrating JS events with Shiny via <code>Shiny.setInputValue()</code>?</li>
<li>Or are you mostly looking for real widget repos to read and adapt?</li>
</ul>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>Items 1 and 3 on your list look good!</p>
</div>
<div class="chatgpt-llm">
<p>Good. Then your resource categories are:</p>
<ol type="1">
<li><strong>Real htmlwidget packages with Shiny input support</strong> — to reverse-engineer and adapt</li>
<li><strong>Targeted examples or tutorials on using <code>Shiny.setInputValue()</code> inside htmlwidgets</strong></li>
</ol>
<p>Let’s start with category 1.</p>
<p><strong>Question 3:</strong></p>
<p>Pick one or two widgets you’ve used or are familiar with—ideally ones where clicking/selecting something in the widget updates a Shiny input. (e.g., <code>DT::datatable</code>, <code>plotly::plotlyOutput</code>). Which ones should we dissect?</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>I’m mostly familiar with those two you mention, more so DT then plotly tho</p>
</div>
<div class="chatgpt-llm">
<p>Perfect. <code>DT</code> is a solid choice—it’s well-documented, simple enough to follow, and has clean Shiny integration.</p>
<p>Here’s what I suggest for <strong>Category 1 (Prior art):</strong></p>
<ul>
<li><strong>Primary resource</strong>:
<ul>
<li><a href="https://github.com/rstudio/DT"><code>DT</code></a> GitHub repo – especially <code>inst/htmlwidgets/datatables.js</code> and how it calls <code>Shiny.setInputValue()</code> when rows are selected.</li>
<li>Focus on how selection is captured (usually via a JS event listener) and how that’s passed back to Shiny.</li>
</ul></li>
<li><strong>Backup/contrast resource</strong>:
<ul>
<li><a href="https://github.com/ropensci/plotly"><code>plotly</code></a> – check <code>srcjs/</code> for how it emits click or hover events to Shiny. Slightly more complex but good for broader perspective.</li>
</ul></li>
</ul>
<p>Now for <strong>Category 3 (Targeted examples of <code>Shiny.setInputValue()</code>):</strong></p>
<ul>
<li>*Mini-tutorials / blogs / gists**:
<ul>
<li><a href="https://shiny.posit.co/r/articles/build/js-send/">Winston Chang’s guide on JS &lt;-&gt; Shiny</a> – clear and concise</li>
<li><a href="https://deanattali.com/blog/htmlwidgets-tips/#sending-values-from-javascript-to-shiny">Dean Attali: Custom inputs</a> – practical advice</li>
<li><a href="https://github.com/ramnathv/htmlwidgets/blob/master/inst/examples/006-shiny-input/output/barchart.js">RStudio’s official htmlwidgets Shiny integration doc</a> – short, focused example</li>
</ul></li>
</ul>
<p>Want me to fetch code excerpts or links for any of those right now? Or would you rather search through them yourself and come back with questions?</p>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>The Dean Attali post looks great and all, but the other two guides links don’t work.</p>
</div>
<div class="chatgpt-llm">
<p>You’re leaning into <strong>learning by doing</strong>, which means you need hands‑on code examples where you can modify and test. That’s the right approach.</p>
<p>Here are solid, working resources for your two resource types:</p>
<hr>
<section id="real-htmlwidget-packages-with-shiny-input-support-reverse-engineering" class="level2">
<h2 class="anchored" data-anchor-id="real-htmlwidget-packages-with-shiny-input-support-reverse-engineering">🧩 1. Real htmlwidget packages with Shiny input support – reverse engineering</h2>
<ul>
<li><p><strong>Dean Attali’s “htmlwidgets tips”</strong> post explains how <code>timevis</code> uses JavaScript to detect item selection and sends it to Shiny:</p>
<pre><code>timeline.on('select', properties =&gt; {
  Shiny.onInputChange(elementId + "_selected", properties.items);
});</code></pre>
<p>This snippet, wrapped in a check for <code>HTMLWidgets.shinyMode</code>, ensures that Shiny receives the selected IDs via the widget’s container ID (<a href="https://book.javascript-for-r.com/widgets-first?utm_source=chatgpt.com" title="Chapter 5 Your First Widget - JavaScript for R">JavaScript for R</a>, <a href="https://deanattali.com/blog/htmlwidgets-tips/?utm_source=chatgpt.com" title="How to write a useful htmlwidgets in R: tips and walk- ...">Dean Attali</a>).</p>
<hr></li>
</ul>
</section>
<section id="tutorialsexamples-of-using-shiny.setinputvalue-or-.oninputchange" class="level2">
<h2 class="anchored" data-anchor-id="tutorialsexamples-of-using-shiny.setinputvalue-or-.oninputchange">🎯 2. Tutorials/examples of using <code>Shiny.setInputValue()</code> or <code>.onInputChange()</code></h2>
<ul>
<li><p><strong>Communicating with Shiny via JavaScript</strong> (Posit article) covers sending values directly from JS to R using <code>Shiny.setInputValue(id, value);</code>. It’s the modern and preferred method (older <code>Shiny.onInputChange()</code> is an alias, but can still work) (<a href="https://shiny.posit.co/r/articles/build/communicating-with-js/?utm_source=chatgpt.com" title="Communicating with Shiny via JavaScript - Posit">Shiny</a>).</p></li>
<li><p><strong>RyouReady blog post</strong> offers a minimal example showing an HTML <code>div</code> with an onclick handler that sends a random number to R via <code>Shiny.onInputChange("mydata", number)</code> and displays it reactively server-side (<a href="https://ryouready.wordpress.com/2013/11/20/sending-data-from-client-to-server-and-back-using-shiny/?utm_source=chatgpt.com" title="Sending data from client to server and back using shiny">“R” you ready?</a>).</p>
<hr></li>
</ul>
<section id="quick-comparison" class="level3">
<h3 class="anchored" data-anchor-id="quick-comparison">✅ Quick Comparison</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>Resource</td>
<td></td>
<td>Why it helps</td>
<td></td>
<td>Focus on</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>Dean Attali (“htmlwidgets tips”)</td>
<td></td>
<td>Real widget code invoking JS event + input change</td>
<td></td>
<td><code>timeline.on('select', ...)</code> and chaining to Shiny</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>Posit “Communicating with JS”</td>
<td></td>
<td>Modern API and rationale</td>
<td></td>
<td><code>Shiny.setInputValue(...)</code> inside a listener</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>RyouReady blog</td>
<td></td>
<td>Minimal standalone JS ↔︎ R demo</td>
<td></td>
<td>Using <code>Shiny.onInputChange</code> in UI and reading <code>input$mydata</code> in server</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="suggested-next-step" class="level3">
<h3 class="anchored" data-anchor-id="suggested-next-step">📌 Suggested next step</h3>
<p>Pick one real widget example (like <em>timevis</em> or similar) and one minimal demo. Then:</p>
<ol type="1">
<li><p>Review the JS code where selection events are handled and <code>Shiny.setInputValue()</code> (or <code>.onInputChange()</code>) is called.</p></li>
<li><p>Modify your widget JS similarly—hook into user’s event selection and send the event ID (or index) via <code>Shiny.setInputValue()</code>.</p></li>
<li><p>Add reactive code in your server to observe <code>input$&lt;widgetId&gt;_selected</code> and log or display it.</p></li>
<li><p>Build a minimal working Shiny app with your widget and observe whether it captures user clicks.</p></li>
<li><p>Want me to pull that specific “page code” from the <code>timevis</code> repo or the Attali post so you can step through it?</p></li>
</ol>
</section>
</section>
</div>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>Wait, can you find me more resources? I don’t want to learn from your summaries</p>
</div>
<div class="chatgpt-llm">
<p>Here’s a curated list of solid, hands‑on resources to go beyond summaries and dive into real working code you can adapt:</p>
<hr>
<section id="real-htmlwidget-packages-with-shiny-input-support" class="level3">
<h3 class="anchored" data-anchor-id="real-htmlwidget-packages-with-shiny-input-support">🔧 Real htmlwidget packages with Shiny input support</h3>
<ul>
<li><p><strong>Dean Attali — “How to write a useful htmlwidgets in R: tips and walk‑through a real example”</strong><br>
</p>
<p>Deals directly with <em>timevis</em> and how it handles events: it includes a live example of passing selections back to Shiny via JavaScript callbacks <a href="https://deanattali.com/blog/htmlwidgets-tips/?utm_source=chatgpt.com" alt="https://deanattali.com/blog/htmlwidgets-tips/?utm_source=chatgpt.com"><u>CRAN+8Dean Attali+8Stack Overflow+8</u></a><a href="https://r4ds.github.io/bookclub-epgs/javascript---shiny-communication.html?utm_source=chatgpt.com" alt="https://r4ds.github.io/bookclub-epgs/javascript---shiny-communication.html?utm_source=chatgpt.com"><u>Shiny+2r4ds.github.io+2engineering-shiny.org+2</u></a>.</p></li>
<li><p><strong>“Widgets with Shiny” ‑ JavaScript for R book (Chapter 17)</strong><br>
</p>
<p>Covers patterns for embedding event handlers in widget JS and using <code>Shiny.setInputValue()</code> in the context of htmlwidgets <a href="https://book.javascript-for-r.com/shiny-widgets?utm_source=chatgpt.com" alt="https://book.javascript-for-r.com/shiny-widgets?utm_source=chatgpt.com"><u>JavaScript for R</u></a><a href="https://engineering-shiny.org/using-javascript.html?utm_source=chatgpt.com" alt="https://engineering-shiny.org/using-javascript.html?utm_source=chatgpt.com"><u>datanovia+3engineering-shiny.org+3Stack Overflow+3</u></a>.</p></li>
</ul>
<hr>
</section>
<section id="tutorials-and-minimal-examples-on-shiny.setinputvalue" class="level3">
<h3 class="anchored" data-anchor-id="tutorials-and-minimal-examples-on-shiny.setinputvalue">🧠 Tutorials and minimal examples on <code>Shiny.setInputValue()</code></h3>
<ul>
<li><p><strong>Posit article — “Communicating with Shiny via JavaScript”</strong><br>
</p>
<p>Concise and modern: shows core usage of <code>Shiny.setInputValue(id, value)</code> and the optional <code>{priority: "event"}</code> flag to treat values as events <a href="https://shiny.posit.co/r/articles/build/communicating-with-js/?utm_source=chatgpt.com" alt="https://shiny.posit.co/r/articles/build/communicating-with-js/?utm_source=chatgpt.com"><u>rstudio.github.io+7Shiny+7r4ds.github.io+7</u></a>.</p></li>
<li><p><strong>“How to build a JavaScript‑based widget” by Posit</strong><br>
</p>
<p>Builds an example widget using D3/C3 and includes code on client‑server communication with Shiny (including <code>setInputValue</code>) <a href="https://shiny.posit.co/r/articles/build/js-build-widget/?utm_source=chatgpt.com" alt="https://shiny.posit.co/r/articles/build/js-build-widget/?utm_source=chatgpt.com"><u>Shiny+1JavaScript for R+1</u></a>.</p></li>
<li><p><strong>R for Data Science Bookclub: “JavaScript ↔︎ Shiny Communication”</strong><br>
</p>
<p>Offers compact code snippets showing how to send data back using <code>Shiny.setInputValue</code> and receive it in R with reactive observers <a href="https://r4ds.github.io/bookclub-epgs/javascript---shiny-communication.html?utm_source=chatgpt.com" alt="https://r4ds.github.io/bookclub-epgs/javascript---shiny-communication.html?utm_source=chatgpt.com"><u>htmlwidgets.org+15r4ds.github.io+15datanovia+15</u></a>.</p></li>
</ul>
<hr>
</section>
<section id="javascript-integration-custom-input-patterns" class="level3">
<h3 class="anchored" data-anchor-id="javascript-integration-custom-input-patterns">📚 JavaScript integration &amp; custom input patterns</h3>
<ul>
<li><p><strong>Datanovia article — “JavaScript Integration and Custom Functionality: Extend Shiny Beyond R”</strong> (May 2025)<br>
</p>
<p>A recent and comprehensive guide to advanced interaction patterns, custom bindings, and message passing between JS and Shiny <a href="https://www.datanovia.com/learn/tools/shiny-apps/advanced-concepts/javascript-integration.html?utm_source=chatgpt.com" alt="https://www.datanovia.com/learn/tools/shiny-apps/advanced-concepts/javascript-integration.html?utm_source=chatgpt.com"><u>JavaScript for R+2datanovia+2CRAN+2</u></a>.</p></li>
</ul>
<hr>
</section>
<section id="stackoverflow-minimal-snippets" class="level3">
<h3 class="anchored" data-anchor-id="stackoverflow-minimal-snippets">🧪 StackOverflow &amp; minimal snippets</h3>
<ul>
<li><p><strong>SO Example — Reactable row click setting input value in Shiny modules</strong><br>
</p>
<p>Shows how <code>onClick</code> handlers call <code>Shiny.setInputValue()</code> to pass selected row data into R, along with observeEvent responses <a href="https://stackoverflow.com/questions/77287387/how-to-trigger-a-modalwindow-with-a-click-event-using-shiny-setinputvalue-inside?utm_source=chatgpt.com" alt="https://stackoverflow.com/questions/77287387/how-to-trigger-a-modalwindow-with-a-click-event-using-shiny-setinputvalue-inside?utm_source=chatgpt.com"><u>Stack Overflow+1engineering-shiny.org+1</u></a>.</p></li>
<li><p><strong>SO thread — Reading selection from radialNetworkR htmlwidget in Shiny</strong><br>
</p>
<p>Illustrates a real-world case where someone needed to capture user selection in a custom widget, and references using Tip 7a from Dean’s blog for guidance <a href="https://stackoverflow.com/questions/54281288/reading-selection-from-html-widget-in-r-shiny?utm_source=chatgpt.com" alt="https://stackoverflow.com/questions/54281288/reading-selection-from-html-widget-in-r-shiny?utm_source=chatgpt.com"><u>search.r-project.org+10Stack Overflow+10nielsenmark.us+10</u></a>.</p></li>
</ul>
<hr>
</section>
<section id="summary-table" class="level3">
<h3 class="anchored" data-anchor-id="summary-table">📋 Summary Table</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Resource</th>
<th>Use Case</th>
<th>What you’ll get</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Dean Attali (timevis code)</td>
<td>Real-world widget code</td>
<td>Understand how JS event to Shiny input is implemented</td>
</tr>
<tr class="even">
<td>Posit JS‑Shiny tutorial</td>
<td>Core API</td>
<td>Clean examples of <code>Shiny.setInputValue()</code> usage</td>
</tr>
<tr class="odd">
<td>JS for R book (Chapter 17)</td>
<td>In‑widget integration</td>
<td>Full example of wiring JS and htmlwidgets with Shiny</td>
</tr>
<tr class="even">
<td>Datanovia (May 2025)</td>
<td>Advanced patterns</td>
<td>Modern perspectives on custom input and messaging</td>
</tr>
<tr class="odd">
<td>SO posts (Reactable, radialNetworkR)</td>
<td>Minimal demos</td>
<td>Concrete handlers showing event → R logic</td>
</tr>
</tbody>
</table>
</section>
</div>
</div>
</div>
</div>
</section>
<section id="step-3---adopt-and-execute-learning-activties" class="level2">
<h2 class="anchored" data-anchor-id="step-3---adopt-and-execute-learning-activties">Step 3 - Adopt and Execute Learning Activties</h2>
<p><strong>Duration: 36 minutes</strong></p>
<p>The third and final step was the most useful by far!</p>
<p>Once again, I pasted in the guide to this step, and ChatGPT created a plan for me containing four items:</p>
<ol type="1">
<li>Reverse-engineer one working widget</li>
<li>Build minimal standalone Shiny demo</li>
<li>Add minimal event tracking to your widget</li>
<li>Wire the widget into a basic Shiny app</li>
</ol>
<p>This was actually pretty impressive; each step contained a goal, the steps required to achieve it, suggestions for how an LLM could help, and a timebox of how long to spend on each activity.</p>
<p>Here’s the first activity suggested:</p>
<blockquote class="blockquote">
<h3 id="reverse-engineer-one-working-widget" class="anchored"><strong>🔍 1. Reverse-engineer one working widget</strong></h3>
<p><strong>Goal:</strong> Understand how an existing widget (e.g.&nbsp;<code>DT</code>) captures selection and sends it to Shiny.</p>
<p><strong>Activity:</strong></p>
<ul>
<li><p>Open the <a href="https://github.com/rstudio/DT">DT GitHub</a> repo.</p></li>
<li><p>Locate where <code>Shiny.setInputValue()</code> is used in the JS files (<code>inst/htmlwidgets/datatables.js</code>).</p></li>
<li><p>Make brief notes:</p>
<ul>
<li>What JS event triggers the update?</li>
<li>How is the input ID constructed?</li>
<li>What data is passed to Shiny?</li>
</ul></li>
</ul>
<p><strong>LLM Role:</strong></p>
<ul>
<li>Ask ChatGPT to walk you through unfamiliar lines or patterns (e.g.&nbsp;“What’s this event handler doing?” or “What does this argument to <code>setInputValue</code> mean?”).</li>
</ul>
<p><strong>Timebox:</strong> 20–30 minutes.</p>
</blockquote>
<p>I walked through each activity, setting a timer on my phone. I found that I completed each in less than the allotted time. I skipped the last activity, as I only required 1-3 to complete the task.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expand to view learning plan
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>OK, my next step is below</p>
<ol start="3" type="1">
<li>Adopt and Execute Learning Activities</li>
</ol>
<p>Adopting and executing learning activities is a crucial task in self-directed learning. This step involves developing a specific plan of action that aligns with established goals and available resources.</p>
<p>Learners should create tailored plans that consider their preferred learning styles and available time for learning. This personalization helps ensure the learning activities are effective and manageable.</p>
<p>Time-management techniques, such as spaced repetition and active recall, are important to incorporate into the learning plan. These strategies can help learners stay on track and optimize their learning process.</p>
<p>Learning activities should be diverse and match the learner’s preferred style. This might include visual aids, podcasts, reading materials, or hands-on activities, depending on whether the learner is visual, auditory, reading/writing, or kinesthetic.</p>
<p>Supplementing core learning activities with additional resources, such as online workshops, can enhance the learning experience and provide different perspectives on the subject matter.</p>
</div>
<section id="execution-plan-llm-assisted-learning-without-code-outsourcing" class="level2 chatgpt-llm">
<h2 class="anchored" data-anchor-id="execution-plan-llm-assisted-learning-without-code-outsourcing">🛠️ Execution Plan: LLM-Assisted Learning Without Code Outsourcing</h2>
<section id="estimated-total-time-23-hours" class="level3">
<h3 class="anchored" data-anchor-id="estimated-total-time-23-hours">⏱️ Estimated Total Time: ~2–3 hours</h3>
<hr>
</section>
<section id="reverse-engineer-one-working-widget-1" class="level3">
<h3 class="anchored" data-anchor-id="reverse-engineer-one-working-widget-1"><strong>🔍 1. Reverse-engineer one working widget</strong></h3>
<p><strong>Goal:</strong> Understand how an existing widget (e.g.&nbsp;<code>DT</code>) captures selection and sends it to Shiny.</p>
<p><strong>Activity:</strong></p>
<ul>
<li><p>Open the <a href="https://github.com/rstudio/DT">DT GitHub</a> repo.</p></li>
<li><p>Locate where <code>Shiny.setInputValue()</code> is used in the JS files (<code>inst/htmlwidgets/datatables.js</code>).</p></li>
<li><p>Make brief notes:</p>
<ul>
<li>What JS event triggers the update?</li>
<li>How is the input ID constructed?</li>
<li>What data is passed to Shiny?</li>
</ul></li>
</ul>
<p><strong>LLM Role:</strong></p>
<ul>
<li>Ask ChatGPT to walk you through unfamiliar lines or patterns (e.g.&nbsp;“What’s this event handler doing?” or “What does this argument to <code>setInputValue</code> mean?”).</li>
</ul>
<p><strong>Timebox:</strong> 20–30 minutes.</p>
<hr>
</section>
<section id="build-minimal-standalone-shiny-demo" class="level3">
<h3 class="anchored" data-anchor-id="build-minimal-standalone-shiny-demo"><strong>🧪 2. Build minimal standalone Shiny demo</strong></h3>
<p><strong>Goal:</strong> Create a toy Shiny app where JS sends a value to R.</p>
<p><strong>Activity:</strong></p>
<ul>
<li>Use this <a href="https://shiny.posit.co/r/articles/build/communicating-with-js/">Posit guide</a> or <a href="https://ryouready.wordpress.com/2013/11/20/sending-data-from-client-to-server-and-back-using-shiny/">RyouReady’s example</a> to build a plain HTML <code>div</code> or button that triggers <code>Shiny.setInputValue()</code> in a browser console or inline JS.</li>
</ul>
<p><strong>LLM Role:</strong></p>
<ul>
<li>Ask it to review the minimal app you’ve built and explain/debug if input isn’t showing up server-side.</li>
</ul>
<p><strong>Timebox:</strong> 20 minutes.</p>
<hr>
</section>
<section id="add-minimal-event-tracking-to-your-widget" class="level3">
<h3 class="anchored" data-anchor-id="add-minimal-event-tracking-to-your-widget"><strong>🧱 3. Add minimal event tracking to your widget</strong></h3>
<p><strong>Goal:</strong> Modify your widget to track one user interaction and send something to Shiny.</p>
<p><strong>Activity:</strong></p>
<ul>
<li>In your widget’s JS binding, add an event listener (e.g.&nbsp;click/select).</li>
<li>Send a dummy value to Shiny using <code>Shiny.setInputValue()</code>.</li>
<li>Observe input in <code>input$yourwidget_selected</code> or similar.</li>
</ul>
<p><strong>LLM Role:</strong></p>
<ul>
<li>Ask for feedback on the specific event binding you’re trying (“Why isn’t this firing?” or “What selector do I use to bind the click?”).</li>
</ul>
<p><strong>Timebox:</strong> 45–60 minutes.</p>
<hr>
</section>
<section id="wire-the-widget-into-a-basic-shiny-app" class="level3">
<h3 class="anchored" data-anchor-id="wire-the-widget-into-a-basic-shiny-app"><strong>🧪 4. Wire the widget into a basic Shiny app</strong></h3>
<p><strong>Goal:</strong> End-to-end test: selection in your timeline → reactive output in Shiny.</p>
<p><strong>Activity:</strong></p>
<ul>
<li>Write a basic Shiny app using your widget.</li>
<li>Use <code>reactivePrint()</code>, <code>observeEvent()</code>, or <code>renderText()</code> to display the selected item.</li>
</ul>
<p><strong>LLM Role:</strong></p>
<ul>
<li>Ask it to sanity check your Shiny app logic or spot input ID mismatches.</li>
</ul>
<p><strong>Timebox:</strong> 30 minutes.</p>
<hr>
</section>
<section id="optional-space-repetition-12-days-later" class="level3">
<h3 class="anchored" data-anchor-id="optional-space-repetition-12-days-later">Optional: <strong>🔁 Space repetition (1–2 days later)</strong></h3>
<p>Come back and:</p>
<ul>
<li>Rebuild the Shiny example from scratch.</li>
<li>Add a new input (e.g.&nbsp;multiple selection).</li>
<li>Explain the flow (JS → R) out loud or in a notebook.</li>
</ul>
<hr>
</section>
<section id="how-i-can-help" class="level3">
<h3 class="anchored" data-anchor-id="how-i-can-help">✅ How I can help</h3>
<p>You run the show. Use me like a senior dev standing over your shoulder:</p>
<ul>
<li>“Explain this line of JS.”</li>
<li>“This event handler isn’t firing—what’s wrong?”</li>
<li>“What’s the right selector for this DOM node?”</li>
<li>“Can you sanity-check this widget binding?”</li>
<li>“What’s the minimal Shiny app I can use to test this?”</li>
</ul>
<hr>
<p>Want a markdown checklist version of this plan to copy into your notes?</p>
</section>
</section>
</div>
</div>
</div>
<p>There was a lot of interaction between me and ChatGPT here, and I’m not going to paste it all, but essentially, during the time I used it to:</p>
<ul>
<li>explain some JavaScript code I didn’t understand by walking me through it line-by-line</li>
<li>get clarity on how to implement some of its suggestions by asking exactly what it meant</li>
<li>multiple rounds of debugging code I had written which didn’t work</li>
<li>helping me work out exactly where the change was needed in my own code</li>
</ul>
<p>In the last example, ChatGPT didn’t just tell me where to put the code, but walked through the important concepts to reason through the answer. It then asked me questions so that <em>I</em> could work out where in the code the change needed to go. Here’s a snippet from that interaction.</p>
<blockquote class="blockquote">
<h3 id="so-where-do-you-want-interactivity" class="anchored">🤔 So… where do you <em>want</em> interactivity?</h3>
<p>Let me ask you this:</p>
<blockquote class="blockquote">
<p>Out of everything that’s being created here, what part of the DOM would the user actually <em>click</em> on if they were selecting a timeline event?</p>
</blockquote>
<p>Once we know that, we can talk about <em>how</em> and <em>where</em> to attach the event handler.</p>
</blockquote>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<blockquote class="blockquote">
<p>I think they’d click on the timeline-box element</p>
</blockquote>
</div>
<blockquote class="blockquote">
<p>Exactly—that’s the actionable node.</p>
<p>That means you’ll want to attach a JS event handler (e.g.&nbsp;<code>.onclick</code> or <code>.addEventListener('click', ...)</code>) to each <code>.timeline-box</code> as it’s created.</p>
<p>Now a follow-up:</p>
<blockquote class="blockquote">
<p>When you’re looping over x.events, what info do you need to send back to Shiny when a .timeline-box is clicked? (Think: what identifier, value, or payload do you want to capture?)</p>
</blockquote>
</blockquote>
<p>We carried on the back and forth like this for a while, with ChatGPT asking me questions to guide me towards the solution. If I got an answer wrong, it replied with an encouraging tone and explained why I was incorrect, and the specific piece of knowledge I was missing.</p>
<p>Eventually, we go to the end of our interaction.</p>
<div class="chatgpt-user" style="background-color: #e8e8e8; padding: 5px; margin-left: 100px">
<p>It’s working!!</p>
</div>
<div class="chatgpt-llm">
<blockquote class="blockquote">
<p>Excellent. That means your widget is now:</p>
<ul>
<li>Rendering cleanly ✅</li>
<li>Sending input to Shiny ✅</li>
<li>Updating on click ✅</li>
</ul>
<p>You’ve now got the full JS → R feedback loop working in your custom <code>htmlwidget</code>.</p>
<hr>
<p>If you want to improve it later, next steps could include:</p>
<ul>
<li>Making the selected element visually highlighted (add/remove a CSS class)</li>
<li>Sending richer data to Shiny (e.g.&nbsp;event ID, label, timestamp)</li>
<li>Supporting multiple selection or deselection</li>
<li>Writing a unit test or snapshot test for the widget rendering</li>
</ul>
</blockquote>
<blockquote class="blockquote">
<p>But honestly—you’ve just crossed the hardest barrier. Nice work.</p>
</blockquote>
<blockquote class="blockquote">
<p>Anything else you want to do with it right now?</p>
</blockquote>
</div>
<p>It sounds like a lot, but this whole experience took around <strong>1 hour from end to end</strong> which I found pretty impressive.</p>
</section>
<section id="the-final-output" class="level2">
<h2 class="anchored" data-anchor-id="the-final-output">The final output</h2>
<p>Here is the final PR: <a href="https://github.com/thisisnic/daisyuiwidget/pull/11" class="uri">https://github.com/thisisnic/daisyuiwidget/pull/11</a>. It’s not particularly complicated, but in the hour it took to write, I learned about some of the internals of the DT package, created a standalone example of sending information between JavaScript and R, and then implemented this in the package.</p>
</section>
<section id="takeaways-from-a-structured-llm-learning-session" class="level2">
<h2 class="anchored" data-anchor-id="takeaways-from-a-structured-llm-learning-session">Takeaways from a structured LLM Learning session</h2>
<p>What made this work wasn’t that ChatGPT giving me the right code but that it helped me ask the right questions. <strong>It acted like a more senior engineer, talking me through unfamiliar concepts, helping me debug my code, and nudging me towards the right mental model</strong>.</p>
<section id="less-overhead-faster-feedback" class="level3">
<h3 class="anchored" data-anchor-id="less-overhead-faster-feedback">Less overhead, faster feedback</h3>
<p>It helped reduce context-switching and help me stay in flow. I didn’t need to spend time refining my overall goal, deciding what steps to take, and skim through partially relevant resources. By instead being able to focusing solely on writing the code, <strong>it prevented the cognitive fatigue of having to switch between “coding” and “planning” mindsets</strong>.</p>
</section>
<section id="still-my-own-work" class="level3">
<h3 class="anchored" data-anchor-id="still-my-own-work">Still my own work</h3>
<p>Could I have done it without the LLM? Yes, but it would have taken longer, and I would have learned less.</p>
<p>Although I was using an LLM, <strong>I was an active participant in my own learning and so felt empowered as a learner</strong>. ChatGPT provided scaffolding and support but not all of the answers.</p>
</section>
<section id="what-id-change-next-time" class="level3">
<h3 class="anchored" data-anchor-id="what-id-change-next-time">What I’d change next time</h3>
<p>A reasonable next step to develop this idea further would be to refine the prompts for each stage - the prompts I included were just summaries of the snippets of the article, rather than specific instructions for ChatGPT. In small tasks like this, I’d treat information gathering as part of the task, and collapse steps 2 and 3.</p>
<p>I found this process really rewarding to try out, and I’d encourage others to give it a go. Let me know how you get on if you do!</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>AI</category>
  <guid>https://niccrane.com/posts/llms_for_learning/</guid>
  <pubDate>Sat, 02 Aug 2025 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/llms_for_learning/tutor_img.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Iterating on an app to create social media posts generating package using {shiny} and {ellmer}</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/socalmediagen2/</link>
  <description><![CDATA[ 





<p>I recently <a href="https://niccrane.com/posts/socialmediagen/">posted about a repo I created containing a Shiny app which allows users to generate social media posts to promote blog posts, using {shiny} and {ellmer}</a>.</p>
<p>If you haven’t used it before, {ellmer} is an R package which allows you to call LLMs directly from R.</p>
<p>I’ll admit right now that, although I’d already been using the LLM prompt used in that project for a while, I threw together the app and associated code in a couple of hours to give me something to write about. People seemed receptive to the blog post, but I wasn’t happy with the code, and so I decided to tidy it up a bit.</p>
<p>In this post, I’m going to discuss the changes I made to get from a few messy scripts to a deployable R package that is much easier to maintain.</p>
<section id="step-1-convert-the-scripts-into-an-r-package" class="level2">
<h2 class="anchored" data-anchor-id="step-1-convert-the-scripts-into-an-r-package">Step 1: Convert the scripts into an R package</h2>
<p>I’m a big fan of writing code as R packages wherever possible; it provides instant structure and reminds me to do important fundamentals such as documenting functions, and writing modular pieces instead of long scripts.</p>
<p>I moved the app code into <code>./R/app.R</code> and separated out the other functions into a file <code>./R/prompts.R</code>.</p>
<p>I also moved the CSS for the app into the package’s <code>inst</code> dir and created a subdirectory in <code>inst</code> to store my prompts.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/socalmediagen2/inst_dir.png" class="img-fluid figure-img"></p>
<figcaption>Contents of the inst dir</figcaption>
</figure>
</div>
</section>
<section id="step-2-saving-the-prompts-in-their-own-file" class="level2">
<h2 class="anchored" data-anchor-id="step-2-saving-the-prompts-in-their-own-file">Step 2: Saving the prompts in their own file</h2>
<p>Next, was where to save the prompts. Originally these were saved as variables, but in the <a href="https://ellmer.tidyverse.org/articles/prompt-design.html#best-practices">ellmer vignette on prompt design</a>, it’s recommended that these are saved in <code>./inst/prompts/</code> with one file per prompt.</p>
<p>The ellmer vignette recommends saving prompts as markdown files as they’re both human-readable and LLM-readable, and so I saved my main prompt as shown below:</p>
<pre><code>Create me social media posts for each of these platforms: {{platforms}}, to promote the blog post below.

* create {{n}} posts per platform
* use a {{tone}} tone
* use hashtags: {{hashtags}}
* use emojis? {{emojis}}

# Blog post contents

{{post_contents}}</code></pre>
<p>You’ll notice the use of placeholders in the prompt. This is because {ellmer} has a helpful function which can read the prompt and inject in variable values. So the last line of my <code>get_prompt()</code> function looks like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ellmer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interpolate_file</span>(</span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt-main.md"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"socialmediagen"</span>),</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">platforms =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(platforms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tone =</span> tone,</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hashtags =</span> hashtags,</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">emojis =</span> emojis,</span>
<span id="cb2-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">post_contents =</span> post_contents</span>
<span id="cb2-9">)</span></code></pre></div>
</section>
<section id="step-3-creating-platform-specific-prompts" class="level2">
<h2 class="anchored" data-anchor-id="step-3-creating-platform-specific-prompts">Step 3: Creating platform-specific prompts</h2>
<p>I realised that best-practices for social media posts vary from platform to platform, and I wanted to experiment with having different prompts depending on which platforms were selected by the user.</p>
<p>I first added the following to my main prompt:</p>
<pre><code># Platform-specific advice

Use the following advice to customise the output for individual platforms:

{{platform_specific_advice}}</code></pre>
<p>I then created additional prompts tailored to each platform, for example, my LinkedIn prompt looks like this:</p>
<pre><code>LinkedIn:
* Keep posts between 1,300 and 2,000 characters. 
* Use short sentences: Posts with sentences under 12 words perform better. 
* ask questions: Encourage comments by asking questions that prompt discussion. 
* give specific instructions: Ask readers to like your post or take another action. 
* use a compelling headline: Grab attention with your first line. 
* use 3 hashtags</code></pre>
<p>I then saved all of these into the <code>inst/prompts</code> directory.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/socalmediagen2/prompt_dir.png" class="img-fluid figure-img"></p>
<figcaption>Contents of the prompt dir</figcaption>
</figure>
</div>
<p>I then created a super-simple function to retrieve the relevant prompt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Retrieve post-writing advice unique to specific platforms</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param platforms Which platforms to get advice for</span></span>
<span id="cb5-4">get_platform_specific_advice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(platforms){</span>
<span id="cb5-5">  prompt_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt-"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(platforms), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".md"</span>)</span>
<span id="cb5-6">  file_paths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts"</span>, prompt_files, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"socialmediagen"</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8">  contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(file_paths, readLines)</span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(contents), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-10">}</span></code></pre></div>
<p>Finally, I updated my <code>get_prompt()</code> function to incorporate these changes:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Construct LLM prompt</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Construct a LLM prompt based on user input</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param blog_link URL of source material</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param platforms Social media platform to create prompts for</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param n Number of prompts to create for each platform</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param emojis Use emojis in post?</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param tone Desired tone of the post</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param hashtags Hashtags to include in the post</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @importFrom ellmer interpolate_file</span></span>
<span id="cb6-12">get_prompt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(blog_link, platforms, n, emojis, tone, hashtags) {</span>
<span id="cb6-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retrieve post contents from GitHub</span></span>
<span id="cb6-14">  post_contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_github_markdown</span>(blog_link)</span>
<span id="cb6-15"></span>
<span id="cb6-16">  platform_specific_advice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_platform_specific_advice</span>(platforms)</span>
<span id="cb6-17"></span>
<span id="cb6-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine components</span></span>
<span id="cb6-19">  ellmer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interpolate_file</span>(</span>
<span id="cb6-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompts"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prompt-main.md"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"socialmediagen"</span>),</span>
<span id="cb6-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">platforms =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(platforms, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>),</span>
<span id="cb6-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb6-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tone =</span> tone,</span>
<span id="cb6-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hashtags =</span> hashtags,</span>
<span id="cb6-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">emojis =</span> emojis,</span>
<span id="cb6-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">post_contents =</span> post_contents,</span>
<span id="cb6-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">platform_specific_advice =</span> platform_specific_advice</span>
<span id="cb6-28">  )</span>
<span id="cb6-29">}</span></code></pre></div>
</section>
<section id="the-resulting-app" class="level2">
<h2 class="anchored" data-anchor-id="the-resulting-app">The resulting app</h2>
<p>My app now is able to create platform-specific content and is much better organised than it was before. I think that updating the prompt was useful - check out the example below of the content generated before and after. The LinkedIn post now it has a strong call-to-action and asks the user a question.</p>
<section id="before" class="level3">
<h3 class="anchored" data-anchor-id="before">Before</h3>
<pre><code>
📢 Calling all data enthusiasts! 📢

Thinking about speaking at Posit Conf 2025 but feeling a bit 😬 about the video abstract? Don't sweat it! This year the abstract just needs to be a short video!

We've compiled some top tips from past speakers to help you nail that one-minute pitch! 🚀

➡️ Learn how to structure your video, what tech to use, and how to inject some of YOUR personality into it! (Humor and creativity are welcome!)

Plus, we're offering feedback on drafts! 📝

[Link to Blog Post]

#rstats</code></pre>
</section>
<section id="after" class="level3">
<h3 class="anchored" data-anchor-id="after">After</h3>
<pre><code>
**Headline:** Nervous About Your Posit Conf Video Abstract? 😩 Don't Be!

Thinking of speaking at #PositConf2025 but dreading the video abstract? You're not alone! It's just one minute to shine ✨.

We've got tips from past speakers Rachael Dempsey, Shannon Pileggi, and Nic Crane to help you nail it! From tech options (easy peasy phone cam to fancy OBS Studio) to structuring your pitch, we've got you covered.

**Blog Post Highlights:**

*   Simple tech options
*   Easy structure for your video
*   How to get feedback

Ready to record? Check out our tips and let your brilliance shine. 💡
[Link to blog post]

What's your biggest video recording fear? Share in the comments! 👇

#rstats #rladies #positconf
</code></pre>
</section>
</section>
<section id="reflecting-on-llm-based-apps" class="level2">
<h2 class="anchored" data-anchor-id="reflecting-on-llm-based-apps">Reflecting on LLM-based apps</h2>
<p>I enjoyed building this example, and on some levels, it doesn’t do anything particularly radical. The same results could be achieved by using the same prompts in a browser session and manually filling in the parameters. However, what I do like about this is that I have a specific place to store my prompts - in a GitHub repo - where I can iterate on them and track changes over time.</p>
<p>I also like that I now have a deployable artifact that I can share with others - I had mentioned to other members of the R-Ladies Global Team that I had been using LLMs to generate social media posts for promoting our news and blog posts, and this means I can easily share the link to the repo with the app, instead of having to share a prompt. Creating this as a distinct project encourages collaboration, whether that’s on which parameters we want to include in the app, or improving the quality of the prompts.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>AI</category>
  <guid>https://niccrane.com/posts/socalmediagen2/</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/socalmediagen2/ellmershiny.png" medium="image" type="image/png" height="172" width="144"/>
</item>
<item>
  <title>Generating social media posts to promote blog posts with {shiny} and {ellmer}</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/socialmediagen/</link>
  <description><![CDATA[ 





<p>Writing blog posts is fun, but the next step, getting people to actually read them, can be trickier. I wanted to promote a recent blog post I co-authored for R-Ladies, but coming up with multiple social media posts felt like a bit of a chore.Instead of doing it it manually, I decided to automate the process by building a Shiny app that generates social media content using large language models (LLMs). It was a fun little project, and could even be useful for others too!</p>
<section id="the-solution-a-shiny-app-powered-by-ai" class="level2">
<h2 class="anchored" data-anchor-id="the-solution-a-shiny-app-powered-by-ai">The Solution: A Shiny App Powered by AI</h2>
<p>The app does the following:</p>
<ul>
<li>Takes a GitHub Markdown link as input.</li>
<li>Lets users specify hashtags, the number of posts to generate, and whether or not to use emojis.</li>
<li>Allows selection of tone (e.g., serious, playful, informative).</li>
<li>Calls Google’s Gemini API via the <a href="https://ellmer.tidyverse.org/"><code>ellmer</code></a> package to generate social media posts promotinhg the blog post.</li>
</ul>
<section id="why-ellmer-and-the-gemini-api" class="level3">
<h3 class="anchored" data-anchor-id="why-ellmer-and-the-gemini-api">Why <code>ellmer</code> and the Gemini API?</h3>
<p>The <code>ellmer</code> package was released last year, and is a delightfully straightforward way to directly call LLMs from R. Google’s Gemini API, in particular, offers a generous free tier - up to 15 requests per minute, which was more than enough for my needs.</p>
</section>
</section>
<section id="how-it-works" class="level2">
<h2 class="anchored" data-anchor-id="how-it-works">How It Works</h2>
<p>The app is simple:</p>
<ol type="1">
<li><strong>Enter the GitHub Markdown file link</strong> (or other text source).</li>
<li><strong>Set your preferences</strong>—hashtags, emojis, tone, and how many posts to generate.</li>
<li><strong>Click generate</strong>, and it spits out a bunch of posts.</li>
<li><strong>Copy and paste</strong> into your social media scheduler.</li>
</ol>
<p>Under the hood, it builds a prompt using the user’s inputs and calls the Gemini API. The response is formatted into platform-appropriate posts, making it much easier to schedule across different social networks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/socialmediagen/preview.png" class="img-fluid figure-img"></p>
<figcaption>Preview of the app</figcaption>
</figure>
</div>
</section>
<section id="deployment-considerations" class="level2">
<h2 class="anchored" data-anchor-id="deployment-considerations">Deployment Considerations</h2>
<p>Right now, the app runs locally, and users need to enter their own Gemini API key as an evironment variable. This prevents abuse of a shared key, but it also makes the app a bit more DIY. I’m considering deploying it on Posit Connect Cloud or a similar service in the future. The trick will be allowing users to bring their own API keys while keeping things secure.</p>
<p>Another thought: supporting multiple AI models so users can plug in API keys for different services like OpenAI’s ChatGPT or Anthropic’s Claude.</p>
</section>
<section id="future-ideas" class="level2">
<h2 class="anchored" data-anchor-id="future-ideas">Future Ideas</h2>
<p>Some things I’d love to add:</p>
<ul>
<li><strong>More refined prompts</strong> tailored to different platforms (e.g., longer for LinkedIn, punchier for Bluesky).</li>
<li><strong>Suggested images</strong> to go with posts.</li>
</ul>
</section>
<section id="try-it-yourself" class="level2">
<h2 class="anchored" data-anchor-id="try-it-yourself">Try It Yourself!</h2>
<p>Want to give it a go? You can find the repo here: <a href="https://github.com/thisisnic/socialmediagen" class="uri">https://github.com/thisisnic/socialmediagen</a></p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>This was a fun little side project that turned out to be actually useful - I’m going to be using it to promote this blog post!</p>
<p>I’d love to hear if you have any ideas for improvements—hit me up if you try it out!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>AI</category>
  <guid>https://niccrane.com/posts/socialmediagen/</guid>
  <pubDate>Fri, 14 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/socialmediagen/preview.png" medium="image" type="image/png" height="98" width="144"/>
</item>
<item>
  <title>Monitoring R Package Updates with Github Actions</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/rwatcher/</link>
  <description><![CDATA[ 





<p>As maintainer of the Arrow R package, there are a few packages I want to keep up to date with, so I can make sure that our bindings continue to be compatible with the latest versions of these packages. The packages I’m most interested in here are:</p>
<ul>
<li>dplyr</li>
<li>stringr</li>
<li>lubridate</li>
</ul>
<p>I’m also interested in knowing when packages that folks use for vaguely similar purposes have been updated; I like to be up-to-date on this as sometimes people ask me about how things compare.</p>
<p>Previously, I’d occasionally caught glimpses of things via social media, but I wanted a more methodical approach, and so decided to write <a href="https://github.com/thisisnic/rwatcher/tree/main">a GitHub Actions CRON job that does this</a>. Now, when any of the packages on my list is updated, I receive an email that looks a little like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/rwatcher/dplyr_update.png" class="img-fluid figure-img"></p>
<figcaption>Email</figcaption>
</figure>
</div>
<p>In this blog post, I’m going to walk through how I created this repository, and how you can do the same for your own packages.</p>
<section id="how-it-all-works" class="level2">
<h2 class="anchored" data-anchor-id="how-it-all-works">How it all works</h2>
<p>The repo itself it pretty simple in structure - it contains the GitHub Actions workflow, and a folder containing the changelogs for the packages I’m interested in.</p>
<pre><code># tree
.github
└── workflows
    └── compare_hashes.yml
changelogs
├── data.table-NEWS.md
├── dbplyr-NEWS.md
├── dplyr-NEWS.md
├── dtplyr-NEWS.md
├── duckdb-NEWS.md
├── duckplyr-NEWS.md
├── lubridate-NEWS.md
├── r-polars-NEWS.md
├── stringr-NEWS.md
└── tidypolars-NEWS.md</code></pre>
<p>The workflow is triggered every day at 1am UTC, and runs a script that compares the hashes of the changelogs in my repo with the hashes of the changelogs in the package repos. If there’s a difference, the new changelog is saved to my repo and it sends me an email.</p>
</section>
<section id="the-github-actions-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-github-actions-workflow">The GitHub Actions Workflow</h2>
<p>In the next sections, I’ll walk through the GitHub Actions workflow, step by step, explaining what each bit does.</p>
<section id="scheduling" class="level3">
<h3 class="anchored" data-anchor-id="scheduling">Scheduling</h3>
<p>The start of the workflow looks like this:</p>
<pre><code>name: Check for package updates

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '00 1 * * *'</code></pre>
<p>It has a name, and the schedule is set to run every day at 1am UTC. The cron syntax is a bit weird, but there’s a handy <a href="https://crontab.guru/">crontab guru</a> that can help you figure out what you need to put in here.</p>
</section>
<section id="jobs" class="level3">
<h3 class="anchored" data-anchor-id="jobs">Jobs</h3>
<p>Next, we set up the different jobs we want to run. I want 1 job to run for each package.</p>
<p>I used GitHub Copilot to help me with some of the syntax here; it was fantastic when I just added a comment describing what I’d like to be added, and then it filled it in. This wasn’t a perfect process as you have to know what to ask, and setting up the list of packages to work with was tricky, as I didn’t quite have the understanding of how matrices (which can run code in parallel) interacted with arrays (for specifying multiple inputs for each parallel job) as I hadn’t used this before. A bit of googling and a skim of StackOverflow and I got there pretty quickly though.</p>
<pre><code>jobs:
  compare-hashes:
    name: ${{matrix.package.name}} updates
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        matrix:
          package: 
            [
                { name: dbplyr, file: dbplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dbplyr/main/NEWS.md' }, 
                { name: lubridate, file: lubridate-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/lubridate/main/NEWS.md' },
                { name: dplyr, file: dplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dplyr/main/NEWS.md'}, 
                { name: data.table, file: data.table-NEWS.md, url: 'https://raw.githubusercontent.com/Rdatatable/data.table/master/NEWS.md'},
                { name: dtplyr, file: dtplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dtplyr/main/NEWS.md'},
                { name: duckdb-r, file: duckdb-r-NEWS.md, url: 'https://raw.githubusercontent.com/duckdb/duckdb-r/main/NEWS.md'},
                { name: r-polars, file: r-polars-NEWS.md, url: 'https://raw.githubusercontent.com/pola-rs/r-polars/main/NEWS.md'},
                { name: stringr, file: stringr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/stringr/main/NEWS.md'},
                { name: duckplyr, file: duckplyr-NEWS.md, url: 'https://raw.githubusercontent.com/duckdblabs/duckplyr/main/NEWS.md'},
                { name: tidypolars, file: tidypolars-NEWS.md, url: 'https://raw.githubusercontent.com/etiennebacher/tidypolars/main/NEWS.md'},
            ]</code></pre>
<p>The <code>runs-on</code> specifies the operating system to run the job on, and the <code>permissions</code> section allows the job to write to the repo. The <code>strategy</code> section is where we set up the matrix of packages to work with. Each package has a name, a file name, and a URL to the changelog. The <code>name</code> of the job is set to the name of the package.</p>
</section>
<section id="steps" class="level3">
<h3 class="anchored" data-anchor-id="steps">Steps</h3>
<p>Next, we set up the steps that we want to run. The first step is to check out the repo we are working in, and get the hash of the relevant changelog file I have stored in my repo. This is saved to the <code>GITHUB_OUTPUT</code> environment variable, which is a file that is shared between all the steps in the job.</p>
<pre><code>    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Get local file hash
          id: local-hash
          run: echo "local_hash=$(md5sum changelogs/${{ matrix.package.file }} | cut -d ' ' -f 1)" &gt;&gt; $GITHUB_OUTPUT</code></pre>
<p>Next, I want to get the hash of the latest version of the package’s changelog file. I do this by downloading the file, and then getting the hash of the downloaded file. This is also saved to the <code>GITHUB_OUTPUT</code> environment variable.</p>
<pre><code>        - name: Get remote file
          id: remote-file
          run: |
                  mkdir tmp
                  curl -s ${{ matrix.package.url }} &gt; tmp/${{ matrix.package.file }}#
        - name: Get remote file hash
          id: remote-hash
          run: echo "remote_hash=$(md5sum tmp/${{ matrix.package.file }} | cut -d ' ' -f 1)" &gt;&gt; $GITHUB_OUTPUT</code></pre>
<p>Finally, I want to compare the hashes of the two files. If they’re different, I want to update the changelog in my repo. I do this by setting up a conditional step that only runs if the hashes are different. In this case, I’m setting the git config, copying the new changelog to my repo, and then committing and pushing the changes.</p>
<pre><code>        - name: Update changed files
          if: ${{ steps.local-hash.outputs.local_hash != steps.remote-hash.outputs.remote_hash }}
          run: |
            echo "Hashes do not match!"   
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "GHA Bot"
            cp tmp/${{ matrix.package.file }} changelogs/${{ matrix.package.file }}
            git add changelogs/${{ matrix.package.file }}
            git pull --ff-only
            git commit -m "Update ${{matrix.package.name}} changelog"
            git push</code></pre>
<p>Finally, I want to send an email notification if the changelog has been updated. I do this by setting up a conditional step that only runs if the hashes are different. I use the <code>dawidd6/action-send-mail</code> action to send the email. I set up a few secrets in my repo to store the email address and password, and then use those in the action. I also set up the subject and body of the email using the package name and URL.</p>
<p>The username and password are not my actual email address and password; instead, you can set up an app password for your email account, and use that instead, which is more secure.</p>
<pre><code>        - name: Send email notification
          if: ${{ steps.local-hash.outputs.local_hash != steps.remote-hash.outputs.remote_hash }}
          uses: dawidd6/action-send-mail@v3
          with:
            server_address: smtp.gmail.com
            server_port: 465
            username: ${{ secrets.MAIL_USERNAME }}
            password: ${{ secrets.MAIL_PASSWORD }}
            subject: "${{matrix.package.name}} update"
            body: "${{matrix.package.name}} has been updated! Please check the changelog at ${{matrix.package.url}}."
            to: ${{ secrets.MAIL_RECIPIENT }}
            from: ${{ secrets.MAIL_USERNAME}}</code></pre>
<p>And that’s it! The full repository can be found <a href="https://github.com/thisisnic/rwatcher">here</a>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I really enjoyed working on this and learning more about GitHub Actions. This has proved to be a useful tool, though there are a few improvements that could be made:</p>
<ul>
<li>some packages update their changelog more frequently than others and so some of the updates I get feel a bit spammy. I could fix this by running my CRON job on a weekly rather than daily schedule.</li>
<li>I don’t use this as much as I anticipated because some changes are really minor, and I tend to skim them and not pay too much attention. Again, a different CRON frequency could probably help here.</li>
<li>I’m more interested in some packages than others. {dplyr}, {lubridate}, and {stringr} are the most important, whereas others are just a “nice to have” here. I could separate these out into different jobs, and run them on different schedules.</li>
</ul>
<p>Anyway, I’d love to hear your thoughts - how do you keep up to date with changes in R packages? Do you have any suggestions for improvements to this workflow? Let me know! Get in touch via <a href="https://fosstodon.org/@nic_crane/111657651694518374">Mastodon</a> or <a href="https://www.linkedin.com/posts/nicolacrane_a-new-blog-post-from-me-monitoring-r-package-activity-7146090133954498560-GIj5?utm_source=share&amp;utm_medium=member_desktop">LinkedIn</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GitHub Actions</category>
  <guid>https://niccrane.com/posts/rwatcher/</guid>
  <pubDate>Thu, 28 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/rwatcher/job.png" medium="image" type="image/png" height="117" width="144"/>
</item>
<item>
  <title>R package documentation - what makes a good example?</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/r-examples/</link>
  <description><![CDATA[ 





<p>I’m currently working on adding to the documentation of the arrow R package, and I’ve started thinking about the qualities of good examples. Specifically, I’m referring to the examples included as part of function documentation. In my experience, the best way for me to achieve rapid familiarity with an R function I haven’t worked with before, or understand how to use a function about which I already understand the basics, is by having example code that I can run. In the book ‘R Packages’, Hadley Wickham <a href="https://r-pkgs.org/man.html#man-functions">remarks</a> that examples are “a very important part of the documentation because many people look at the examples first” and <a href="https://devguide.ropensci.org/building.html#general">rOpenSci recommend</a> that each of a package’s exported functions should be accompanied by examples.</p>
<p>In this blog post, I will explore the things that I believe make for good function examples in documentation, focussing mainly on R.</p>
<section id="what-good-looks-like-in-r" class="level2">
<h2 class="anchored" data-anchor-id="what-good-looks-like-in-r">What good looks like in R</h2>
<p>I asked people on Twitter for their opinions of good R package documentation in general, and <a href="https://twitter.com/_J_sinclair/status/1391677551261650945">Jonathan Sinclair</a> highlighted the ‘examples’ section from <a href="https://rdrr.io/cran/dplyr/man/case_when.html"><code>dplyr::case_when</code></a>, the beginning of which is shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/dplyr_case_when.png" class="img-fluid figure-img"></p>
<figcaption>(image from: https://rdrr.io/cran/dplyr/man/case_when.html)</figcaption>
</figure>
</div>
<p>I think Jonathan is spot on in his assessment. To paraphrase, the highlights for him are:</p>
<ul>
<li>there is next to no prose or intro</li>
<li>there are plenty of comments, as needed, to explain the examples</li>
<li>there is a variety of different examples</li>
<li>there are examples of what <em>not</em> to do.</li>
</ul>
<p>This kind of documentation appeals to my skim-reading self. If I’m trying to accomplish a task, sometimes I just want to run some code and see what happens to get an intuitive feel for what a function does. While I am fully prepared to slow down and read the rest of the documentation, a “quick win” motivates me to invest the additional effort. It tells me that the developers of this code have prioritised making things easy to understand and that the time I am investing will pay off.</p>
<p>I’ve been skimming through the documentation of some tidyverse and related packages - as I consider many of these to be well documented and easy to read. Here are some things I’ve observed which I think one can do to make function examples look great:</p>
<ul>
<li>include the most basic usage of a function</li>
<li>use very simple toy datasets or standard in-built datasets</li>
<li>demonstrate non-obvious behaviours of a function</li>
<li>demonstrate different parameter values/combinations where relevant</li>
<li>demonstrate any unusual parameters</li>
<li>demonstrate on different objects if appropriate</li>
<li>sometimes go beyond the use of an individual function to include common mini-workflows</li>
<li>group documentation and examples for similar functions together</li>
<li>include examples that may lead to unexpected results</li>
<li>include comments to explain examples</li>
<li>no examples for deprecated functions to discourage their use</li>
<li>no unpredictable external dependencies - <code>rvest::html_text</code> manually creates HTML to demonstrate capabilities rather than scraping an external site</li>
<li>sometimes showing the output when it adds to the example (e.g.&nbsp;<code>tidyselect::starts_with()</code> and many other examples from that package)</li>
<li>examples should be correct and run without error (unless intended to show erroneous output)</li>
</ul>
</section>
<section id="what-bad-looks-like-in-r" class="level2">
<h2 class="anchored" data-anchor-id="what-bad-looks-like-in-r">What bad looks like in R</h2>
<p>I am not intending to “name and shame” any package authors who haven’t included examples for their functions. It may have been overlooked, there may be plenty of explanation elsewhere, or they may have felt that the code was not sufficiently complex to require examples. It might be true that it seems obvious what a function does, but that makes assumptions about the users of your code that might not hold.</p>
</section>
<section id="what-good-looks-like-generally" class="level2">
<h2 class="anchored" data-anchor-id="what-good-looks-like-generally">What good looks like generally</h2>
<p>When reading through examples, one thing that struck me is that when I’m looking at Python docs in Jupyter Notebook (<a href="https://stackoverflow.com/questions/30855169/how-can-i-see-function-arguments-in-ipython-notebook-server-3">press shift + tab</a>), I also see the output of running the examples.</p>
<p><img src="https://niccrane.com/posts/r-examples/sklearn_docs.png" class="img-fluid"></p>
<p>Similarly, both examples and outputs are shown in the official docs for some libraries, for example, pandas.</p>
<p><img src="https://niccrane.com/posts/r-examples/pandas.png" class="img-fluid"></p>
<p>I think this is a helpful feature - less effort is required to see how a function works.</p>
<p>In R function documentation, runnable code is often included, but in most cases needs to be manually run by the reader to see the output. I’m torn as to whether this is good or not. On the one hand, it encourages you to run the code and get a more tangible feel for what it does and saves valuable space in the Viewer window in RStudio. On the other hand, it adds an extra manual step to your workflow and lengthens the time until that precious “quick win” of enlightenment when exploring a new function.</p>
<p>You get a lot closer to this on the website <a href="https://rdrr.io/">rdrr.io</a>, which indexes R package documentation and allows examples to be run inline. However, examples are run one after the other without the original code being displayed. So in the case of multiple examples, you have to match up the output to which example it is from.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/rdrr.png" class="img-fluid figure-img"></p>
<figcaption>(from https://rdrr.io/cran/dplyr/man/case_when.html)</figcaption>
</figure>
</div>
<p>Some packages include output as comments within their examples. For instance, the <code>tidyselect</code> package; here’s an example from <code>tidyselect::all_of</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/tidyselect.png" class="img-fluid figure-img"></p>
<figcaption>(from https://rdrr.io/cran/tidyselect/man/all_of.html)</figcaption>
</figure>
</div>
<p>All that said, while the ability to see the output of examples is a nice-to-have, I don’t think it’s essential to good function documentation. With any piece of documentation, it’s necessary to consider the purpose; at a minimum, examples exist to tell the reader how to use a function, and you don’t need to see the output to do that.</p>
<p>Since I first wrote this, I found out that it is possible to easily <a href="https://blog.rstudio.com/2017/09/13/rstudio-v1.1-the-little-things/">run examples from help files by selecting them and then hitting Ctrl+Enter</a>, the same as running code in the Source pane.</p>
<p><img src="https://niccrane.com/posts/r-examples/execute_help.png" class="img-fluid"></p>
<p>Another thing I wasn’t aware of - <a href="https://pkgdown.r-lib.org/">pkgdown</a> - commonly used to automatically render docs for packages run examples and displays the output underneath. Check out the example below from the Arrow pkgdown site.</p>
<p><img src="https://niccrane.com/posts/r-examples/arrow_examples.png" class="img-fluid"></p>
<p>In conclusion, good examples make functions easier to work with and help readers of your documentation gain a deeper understanding of how a function works. While any examples are better than no examples, you can give your users the best chance of success when using your code with careful thought about the content of your documentation.</p>
<p>Huge thanks to everyone who responded to my Twitter thread, and to my fantastic colleague <a href="https://twitter.com/jorisvdbossche">Joris Van den Bossche</a> for reading the first draft of this, and our conversations about how things are done in R and Python.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Python</category>
  <guid>https://niccrane.com/posts/r-examples/</guid>
  <pubDate>Mon, 17 May 2021 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/r-examples/arrow_examples.png" medium="image" type="image/png" height="95" width="144"/>
</item>
</channel>
</rss>
