<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Nic Crane</title>
<link>https://niccrane.com/blog.html</link>
<atom:link href="https://niccrane.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Nic Crane&#39;s Blog</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Thu, 28 Dec 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Monitoring R Package Updates with Github Actions</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/rwatcher/index.html</link>
  <description><![CDATA[ 




<p>As maintainer of the Arrow R package, there are a few packages I want to keep up to date with, so I can make sure that our bindings continue to be compatible with the latest versions of these packages. The packages I’m most interested in here are:</p>
<ul>
<li>dplyr</li>
<li>stringr</li>
<li>lubridate</li>
</ul>
<p>I’m also interested in knowing when packages that folks use for vaguely similar purposes have been updated; I like to be up-to-date on this as sometimes people ask me about how things compare.</p>
<p>Previously, I’d occasionally caught glimpses of things via social media, but I wanted a more methodical approach, and so decided to write <a href="https://github.com/thisisnic/rwatcher/tree/main">a GitHub Actions CRON job that does this</a>. Now, when any of the packages on my list is updated, I receive an email that looks a little like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/rwatcher/dplyr_update.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Email</figcaption>
</figure>
</div>
<p>In this blog post, I’m going to walk through how I created this repository, and how you can do the same for your own packages.</p>
<section id="how-it-all-works" class="level2">
<h2 class="anchored" data-anchor-id="how-it-all-works">How it all works</h2>
<p>The repo itself it pretty simple in structure - it contains the GitHub Actions workflow, and a folder containing the changelogs for the packages I’m interested in.</p>
<pre><code># tree
.github
└── workflows
    └── compare_hashes.yml
changelogs
├── data.table-NEWS.md
├── dbplyr-NEWS.md
├── dplyr-NEWS.md
├── dtplyr-NEWS.md
├── duckdb-NEWS.md
├── duckplyr-NEWS.md
├── lubridate-NEWS.md
├── r-polars-NEWS.md
├── stringr-NEWS.md
└── tidypolars-NEWS.md</code></pre>
<p>The workflow is triggered every day at 1am UTC, and runs a script that compares the hashes of the changelogs in my repo with the hashes of the changelogs in the package repos. If there’s a difference, the new changelog is saved to my repo and it sends me an email.</p>
</section>
<section id="the-github-actions-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-github-actions-workflow">The GitHub Actions Workflow</h2>
<p>In the next sections, I’ll walk through the GitHub Actions workflow, step by step, explaining what each bit does.</p>
<section id="scheduling" class="level3">
<h3 class="anchored" data-anchor-id="scheduling">Scheduling</h3>
<p>The start of the workflow looks like this:</p>
<pre><code>name: Check for package updates

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '00 1 * * *'</code></pre>
<p>It has a name, and the schedule is set to run every day at 1am UTC. The cron syntax is a bit weird, but there’s a handy <a href="https://crontab.guru/">crontab guru</a> that can help you figure out what you need to put in here.</p>
</section>
<section id="jobs" class="level3">
<h3 class="anchored" data-anchor-id="jobs">Jobs</h3>
<p>Next, we set up the different jobs we want to run. I want 1 job to run for each package.</p>
<p>I used GitHub Copilot to help me with some of the syntax here; it was fantastic when I just added a comment describing what I’d like to be added, and then it filled it in. This wasn’t a perfect process as you have to know what to ask, and setting up the list of packages to work with was tricky, as I didn’t quite have the understanding of how matrices (which can run code in parallel) interacted with arrays (for specifying multiple inputs for each parallel job) as I hadn’t used this before. A bit of googling and a skim of StackOverflow and I got there pretty quickly though.</p>
<pre><code>jobs:
  compare-hashes:
    name: ${{matrix.package.name}} updates
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        matrix:
          package: 
            [
                { name: dbplyr, file: dbplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dbplyr/main/NEWS.md' }, 
                { name: lubridate, file: lubridate-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/lubridate/main/NEWS.md' },
                { name: dplyr, file: dplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dplyr/main/NEWS.md'}, 
                { name: data.table, file: data.table-NEWS.md, url: 'https://raw.githubusercontent.com/Rdatatable/data.table/master/NEWS.md'},
                { name: dtplyr, file: dtplyr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/dtplyr/main/NEWS.md'},
                { name: duckdb-r, file: duckdb-r-NEWS.md, url: 'https://raw.githubusercontent.com/duckdb/duckdb-r/main/NEWS.md'},
                { name: r-polars, file: r-polars-NEWS.md, url: 'https://raw.githubusercontent.com/pola-rs/r-polars/main/NEWS.md'},
                { name: stringr, file: stringr-NEWS.md, url: 'https://raw.githubusercontent.com/tidyverse/stringr/main/NEWS.md'},
                { name: duckplyr, file: duckplyr-NEWS.md, url: 'https://raw.githubusercontent.com/duckdblabs/duckplyr/main/NEWS.md'},
                { name: tidypolars, file: tidypolars-NEWS.md, url: 'https://raw.githubusercontent.com/etiennebacher/tidypolars/main/NEWS.md'},
            ]</code></pre>
<p>The <code>runs-on</code> specifies the operating system to run the job on, and the <code>permissions</code> section allows the job to write to the repo. The <code>strategy</code> section is where we set up the matrix of packages to work with. Each package has a name, a file name, and a URL to the changelog. The <code>name</code> of the job is set to the name of the package.</p>
</section>
<section id="steps" class="level3">
<h3 class="anchored" data-anchor-id="steps">Steps</h3>
<p>Next, we set up the steps that we want to run. The first step is to check out the repo we are working in, and get the hash of the relevant changelog file I have stored in my repo. This is saved to the <code>GITHUB_OUTPUT</code> environment variable, which is a file that is shared between all the steps in the job.</p>
<pre><code>    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Get local file hash
          id: local-hash
          run: echo "local_hash=$(md5sum changelogs/${{ matrix.package.file }} | cut -d ' ' -f 1)" &gt;&gt; $GITHUB_OUTPUT</code></pre>
<p>Next, I want to get the hash of the latest version of the package’s changelog file. I do this by downloading the file, and then getting the hash of the downloaded file. This is also saved to the <code>GITHUB_OUTPUT</code> environment variable.</p>
<pre><code>        - name: Get remote file
          id: remote-file
          run: |
                  mkdir tmp
                  curl -s ${{ matrix.package.url }} &gt; tmp/${{ matrix.package.file }}#
        - name: Get remote file hash
          id: remote-hash
          run: echo "remote_hash=$(md5sum tmp/${{ matrix.package.file }} | cut -d ' ' -f 1)" &gt;&gt; $GITHUB_OUTPUT</code></pre>
<p>Finally, I want to compare the hashes of the two files. If they’re different, I want to update the changelog in my repo. I do this by setting up a conditional step that only runs if the hashes are different. In this case, I’m setting the git config, copying the new changelog to my repo, and then committing and pushing the changes.</p>
<pre><code>        - name: Update changed files
          if: ${{ steps.local-hash.outputs.local_hash != steps.remote-hash.outputs.remote_hash }}
          run: |
            echo "Hashes do not match!"   
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "GHA Bot"
            cp tmp/${{ matrix.package.file }} changelogs/${{ matrix.package.file }}
            git add changelogs/${{ matrix.package.file }}
            git pull --ff-only
            git commit -m "Update ${{matrix.package.name}} changelog"
            git push</code></pre>
<p>Finally, I want to send an email notification if the changelog has been updated. I do this by setting up a conditional step that only runs if the hashes are different. I use the <code>dawidd6/action-send-mail</code> action to send the email. I set up a few secrets in my repo to store the email address and password, and then use those in the action. I also set up the subject and body of the email using the package name and URL.</p>
<p>The username and password are not my actual email address and password; instead, you can set up an app password for your email account, and use that instead, which is more secure.</p>
<pre><code>        - name: Send email notification
          if: ${{ steps.local-hash.outputs.local_hash != steps.remote-hash.outputs.remote_hash }}
          uses: dawidd6/action-send-mail@v3
          with:
            server_address: smtp.gmail.com
            server_port: 465
            username: ${{ secrets.MAIL_USERNAME }}
            password: ${{ secrets.MAIL_PASSWORD }}
            subject: "${{matrix.package.name}} update"
            body: "${{matrix.package.name}} has been updated! Please check the changelog at ${{matrix.package.url}}."
            to: ${{ secrets.MAIL_RECIPIENT }}
            from: ${{ secrets.MAIL_USERNAME}}</code></pre>
<p>And that’s it! The full repository can be found <a href="https://github.com/thisisnic/rwatcher">here</a>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I really enjoyed working on this and learning more about GitHub Actions. This has proved to be a useful tool, though there are a few improvements that could be made:</p>
<ul>
<li>some packages update their changelog more frequently than others and so some of the updates I get feel a bit spammy. I could fix this by running my CRON job on a weekly rather than daily schedule.</li>
<li>I don’t use this as much as I anticipated because some changes are really minor, and I tend to skim them and not pay too much attention. Again, a different CRON frequency could probably help here.</li>
<li>I’m more interested in some packages than others. {dplyr}, {lubridate}, and {stringr} are the most important, whereas others are just a “nice to have” here. I could separate these out into different jobs, and run them on different schedules.</li>
</ul>
<p>Anyway, I’d love to hear your thoughts - how do you keep up to date with changes in R packages? Do you have any suggestions for improvements to this workflow? Let me know! Get in touch via <a href="https://fosstodon.org/@thisisnic">Mastodon</a> or <a href="https://www.linkedin.com/in/nicolacrane">LinkedIn</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GitHub Actions</category>
  <guid>https://niccrane.com/posts/rwatcher/index.html</guid>
  <pubDate>Thu, 28 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/rwatcher/job.png" medium="image" type="image/png" height="117" width="144"/>
</item>
<item>
  <title>Explaining the C bits at the start of ‘Deep R Programming Ch14: Interfacing compiled code’</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/c_deepr/index.html</link>
  <description><![CDATA[ 




<p>One of my goals for next year is to get a deeper understanding of R’s C API. I’m making a start on this by reading <a href="https://deepr.gagolewski.com/chapter/310-compiled.html">Chapter 14 of Deep R Programming by Marek Gagolewski: “Interfacing compiled code”</a>. It’s a great resource, though the chapter preface states “we assume basic knowledge of the C language”. <del>I do not have this knowledge</del> My C knowledge is fairly limited, and so this blog post will pull out some of the details from that chapter, especially bits where I’ve had to go “wtf is that?!” or remind myself by googling. My current level of C knowledge at the moment is pretty minimal; the main things I know are:</p>
<ul>
<li>C is a compiled language (as opposed to an interpreted language) and C code needs compiling before it can be run</li>
<li>A lot of R’s internals are based on C</li>
<li>C is a statically-type language; this means that variable types are defined when the variable is created and cannot later change other than via explicit manual casting</li>
</ul>
<p>And that’s basically it! I imagine there are other bits I don’t realise I know which I’ve picked up from being an R package maintainer and dabbling in a few C++ tutorials, but I’ll try to explain everything as much as possible. OK, let’s do this!</p>
<p>The book chapter provides an example package with a simple C function implemented, and walks us through the code step-by-step. Great!</p>
<p>Section 14.1.1 starts off with an example of a C function defined in <code>src/cfunc.h</code>. I guess the first thing to note is the location of the file - in the package’s <code>src</code> directory. This is where any compiled code needs to go, typically C or C++ code, or even Fortran if you’re really going old-school.</p>
<section id="header-files-and-source-files" class="level3">
<h3 class="anchored" data-anchor-id="header-files-and-source-files">Header files and source files</h3>
<p>Another thing to note here is the file name, which ends in <code>.h</code>. C code can be divided into header files (ending in <code>.h</code>) and source files (ending in <code>.c</code>). Header files contain the function declarations (including variable types) and other things like macros (named bits of code for the pre-processor to work with). They’re sometimes referred to as the interface - they contain information about functions’ inputs and outputs - including the argument names and types.</p>
</section>
<section id="once-only-includes" class="level3">
<h3 class="anchored" data-anchor-id="once-only-includes">Once-only includes</h3>
<p>The first couple of lines of code in the header file contain these lines:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef __CFUNS_H</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define __CFUNS_H</span></span></code></pre></div>
<p>and the final line is</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span></code></pre></div>
<p>What’s happening here is that, often we can end up with projects containing multiple files, some of which source each other, and include them. We don’t want to end up with duplication of the headers which have been included, otherwise the compiler will raise an error, so we put them in an <code>#ifndef</code> wrapper, and give them a name. Basically, what we’re saying to the preprocessor here is that if this name hasn’t already been defined, defined it and include this code, but if it’s already defined then skip this.</p>
</section>
<section id="includes" class="level3">
<h3 class="anchored" data-anchor-id="includes">Includes</h3>
<p>The third line in <code>src/cfunc.h</code> is:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stddef.h&gt;</span></span></code></pre></div>
<p>This allows for the inclusion of a file from <a href="https://en.wikipedia.org/wiki/C_standard_library">the C standard library</a>, which has a few different variables included. The key one for us here is <code>size_t</code>, which is commonly used for iterating over items in arrays - we need this as we’ll be including a <code>for</code> loop in the definition of our function.</p>
</section>
<section id="the-preprocessor" class="level3">
<h3 class="anchored" data-anchor-id="the-preprocessor">The preprocessor</h3>
<p>Above I casually mentioned the C preprocessor a couple of times without defining it. A succinct and perhaps naive summary is that there are <a href="https://en.wikichip.org/wiki/c/phases_of_translation">multiple steps</a> in the compilation of C code. One of these phases is preprocessing and it involves things like processing any additional files we’ve said we wanted to include, and replacing macros with their definitions.</p>
</section>
<section id="declarations" class="level3">
<h3 class="anchored" data-anchor-id="declarations">Declarations</h3>
<p>So, the declaration for the function in the example looks like this</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> my_c_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>In words, this means that:</p>
<ul>
<li>it is a function which returns an object of type double</li>
<li>the function name is <code>my_c_sum</code></li>
<li>the first argument is called <code>x</code></li>
<li><code>x</code> is a pointer to a variable of type double</li>
<li><code>x</code> is a <code>const</code> variable, which means it won’t be modified in the body of the function</li>
<li>the second argument is called <code>n</code></li>
<li><code>n</code> is of type <code>size_t</code></li>
</ul>
<p>This concept of a pointer just means that <code>x</code> contains the memory address of the double that we pass in, rather than a copy of the values in it. This prevents us from copying the values unnecessarily.</p>
</section>
<section id="source-file" class="level3">
<h3 class="anchored" data-anchor-id="source-file">Source file</h3>
<p>Source files contain the body of the function, sometimes called the implementation.</p>
<p>The code in the book chapter goes on to show the content of the file <code>src/cfuncs.c</code>. The first line of this file is:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"cfuns.h"</span></span></code></pre></div>
<p>This is including the header file we discussed above. The rest of the code in the source file contains the definition of <code>my_c_sum</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* computes the sum of all elements in an array x of size n */</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> my_c_sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* this code does not treat potential missing values specially</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           (they are kinds of NaNs); to fix this, add:</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if (ISNA(x[i])) return NA_REAL;  // #include &lt;R.h&gt;  */</span></span>
<span id="cb6-9">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The function signature here is identical to how it is defined in the header file. The <code>for</code> loop uses the <code>n</code> argument which was passed in to represent the size of the array to loop through. In numerous other languages we’d calculate the size of the array in the body of the function, but in C you cannot have an array of unknown size, and so it must be passed in as a parameter. I think this is to do with how the C compiler allocates memory; more modern C <em>does</em> have the concept of variable-length arrays.</p>
<p>The chapter goes on to discuss further examples which then show how to include a wrapper which can be called by R. I won’t discuss this here, as the text there is all explained well, and the contents are more specific to R’s C API, and not specifically just C-related topics.</p>
<p>Here’s a summary of the C-related topics mentioned here:</p>
<ul>
<li>header files and source files</li>
<li>includes</li>
<li>once-only includes</li>
<li>the preprocessor</li>
<li>variable-length arrays</li>
<li><code>const</code> variables</li>
<li>pointers</li>
<li>statically-typed languages</li>
<li>compiled and interpreted languages</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>C</category>
  <guid>https://niccrane.com/posts/c_deepr/index.html</guid>
  <pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/c_deepr/deepr.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Reflections on 2023</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/2023wrapup/index.html</link>
  <description><![CDATA[ 




<p>Here’s a summary of my highlights of 2023!</p>
<section id="arrow-positconf-workshop" class="level2">
<h2 class="anchored" data-anchor-id="arrow-positconf-workshop">Arrow posit::conf workshop</h2>
<p>The biggest professional achievement for me was having the privilege of being invited to co-present <a href="https://github.com/posit-conf-2023/arrow">a workshop with Steph Hazlitt about Arrow at posit::conf</a>. Steph is fantastic to work with, and while writing and delivering the workshop was hard work, it paid off in the end - we received really positive feedback from attendees. The experience reignited my passion for teaching, and desire to develop those skills. I’ve applied for Carpentries instructor training, which I’m still waiting to hear back about, and I’m excited to also be working with Steph on creating a 2 hour version of the workshop, which we’re planning on teaching at user events in 2024.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/2023wrapup/posit_conf.jpg" class="img-fluid figure-img" width="500"></p>
<figcaption class="figure-caption">Hanging out with some awesome people at posit::conf 2023!</figcaption>
</figure>
</div>
</section>
<section id="arrow-r-maintenance-bot" class="level2">
<h2 class="anchored" data-anchor-id="arrow-r-maintenance-bot">Arrow R Maintenance bot</h2>
<p>Another project I enjoyed working on was creating the <a href="https://github.com/thisisnic/arrow_r_maintenance">Arrow maintenance bot</a>. It pulls data from the GitHub API, aggregates the relevant bits, and then posts it to a Zulip channel (though also works for Slack). It was an itch I’d wanted to scratch for a long time, as I’d previously got this information by clicking on various bookmarks every so often whenever I remembered. The output is shown in the screenshot below; basically, it summarises new bug tickets which need investigating, investigated bugs which need a fix, and open PRs which may need reviewing. <img src="https://niccrane.com/posts/2023wrapup/r_maintenance_bot.png" class="img-fluid" width="520" alt="Screenshot showing the output that the maintenance bot produces"></p>
<p>There are more aspects of arrow maintenance which I’d love to automate and pull together in dashboard form - I’ve been discussing this with a friend, and I hope we find the time to work on this in 2024!</p>
</section>
<section id="arrow-maintenance-and-book" class="level2">
<h2 class="anchored" data-anchor-id="arrow-maintenance-and-book">Arrow maintenance and book</h2>
<p>In January, I became the official package maintainer on CRAN. It took my some time to get my head around this; it’s a daunting responsibility, and in reality I’m part of a wider team, all of whom play an important part.</p>
<p>The amount of time I’ve been able to spend on Arrow has dropped significantly since I left Voltron Data, though I’m hoping to be able to spend more time this year on it. I feel like my focus will shift a little, away from code, and more towards encouraging new contributors, as well as teaching people how to use the package.</p>
<p>Most excitingly though, is the book which I am co-authoring! This is taking up the main chunk of my Arrow-related time, but the aim is to have the manuscript submitted to the publishers by summer, if not sooner.</p>
</section>
<section id="c" class="level2">
<h2 class="anchored" data-anchor-id="c">C++</h2>
<p>Having interacted with bits of C++ code while working on Arrow, I decided to spend time learning C++ more formally. I’ve generally found this tricky - frankly, higher-level languages seem to have more engaging content out there. I made a start on the Udacity C++ Nanodegree, which I completed over half of, but was limited on time and so paused this - I plan to pick it up again next year though. I also tried a more practical approach, and decided to make a PR to the Arrow C++ codebase - one of the PRs I am most proud of this year is <a href="https://github.com/apache/arrow/pull/34050/">this one, adding support for the Substrait cast expression</a>. It was hard, though most of the complexity came from peripheral tasks, like working out how to run the code interactively in the debugger.</p>
</section>
<section id="joining-the-rladies-global-team" class="level2">
<h2 class="anchored" data-anchor-id="joining-the-rladies-global-team">Joining the RLadies Global team</h2>
<p>I spent some time thinking about how I could engage more with the wider R community, and so I volunteered to join the RLadies global team, helping set up new chapters on meetup.com. I’ve not done much here yet, but am delighted to be part of the organisation, and hope to be able to help out more in 2024</p>
</section>
<section id="career-break-and-plans-for-2024-recurse-center" class="level2">
<h2 class="anchored" data-anchor-id="career-break-and-plans-for-2024-recurse-center">Career break and plans for 2024 (Recurse Center!)</h2>
<p>Last, but absolutely not least, is my decision to take a career break. After leaving Voltron Data, I’d been working part-time in a contractor capacity, alongside working on the Arrow book, but I decided I wanted to narrow my focus and take some time out for me.</p>
<p>I’m taking a break and spending the next couple of months focusing on writing. Once most of the book is done, I plan to spend more time on my open source work in general, which will involve teaching and talking about Arrow, as well as pushing forward a few side projects.</p>
<p>The most exciting news I’ve had this year is that I applied to the Recurse Center a few weeks ago. RC is like a writer’s retreat for programmers, and attendees spend 12 weeks together working on programming problems of their choice. I want to get to grips with R’s internals, and learn about the C API, as well as levelling up my C++ skills in general. I’m delighted to say that I was accepted to attend this morning, and will be joining the spring batch in late March! I’ve got a ton of ideas for projects I want to work on, but will have to see how much time I ultimately end up having.</p>
<p>Longer-term - I don’t know. Ultimately, I’d love to get paid to work on open source again, but those opportunities are few and far between. I also have some professional goals I’d like to hit before I’m going to be in the right headspace to engage with this too - between writing the book and my plans for Recurse Center, I’ll be there pretty soon.</p>
<p>This year has been a real rollercoaster, but I’m extremely grateful to all my friends and mentors who have helped me during this time.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://niccrane.com/posts/2023wrapup/index.html</guid>
  <pubDate>Thu, 21 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/2023wrapup/2023.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>Debugging</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/debugging/index.html</link>
  <description><![CDATA[ 




<p>As a package maintainer, I’m constantly disappointed when folks mention Arrow bugs they’re aware of but haven’t reported. Not disappointed with the individual in question, but disappointed with the fact that we’re not at the point where we’ve created an environment in which folks are happy to just report bugs immediately. This is not an Arrow-specific problem, and I find myself behaving in exactly the same way with other open source projects. If I’m not entirely sure something is a bug, I’m not going to risk looking foolish publicly by complaining, but the irony of this is that I don’t judge users who make those mistakes with Arrow, as usually it means we need to improve our docs to be more clear, and that in itself is valuable feedback.</p>
<p>I really love interacting with people who use the package, as without that interaction, development and maintenance can feel like shouting into the void. I like being able to solve problems that make other people’s lives easier, and I thrive off that social energy. I implemented bindings for <code>dplyr::across()</code> because someone commented on Twitter that they’d love to see it as a feature. Last night I got home from a friend’s birthday drinks, saw a <a href="https://stackoverflow.com/questions/77225402/rarrow-reading-double-with-comma-decimal-separator">user question on Stack Overflow which had an easy win</a>, and within an hour had a pull request up which implemented a new function and fixed the particular issue. I am not promising this level of responsiveness in perpetuity, but I’m still at the point where I find this kind of thing exciting and energising.</p>
<p>One particular bug which has haunted me for the past 6 months, is a particularly irritating one whereby when working with a partitioned CSV dataset in arrow (I’m using lowercase to denote the R package, rather than Arrow the overall project), if the user manually specified a schema, the variable used for partitioning did not appear in the resulting dataset. This is a huge problem IMO - while we can sit here all day talking about the virtues of Parquet, in reality, a lot of our users will be using CSVs, and it’s issues like these that can rule out being able to use arrow at all in some cases.</p>
<p>When I opened <a href="https://github.com/apache/arrow/issues/34640">the original issue</a> based on <a href="https://github.com/apache/arrow/issues/34589">another user issue</a>, I knew it was important, but felt a bit stuck. It wasn’t immediately obvious to anyone what the source of the error was. I’d assumed it must be a C++ error and flagged it as such, but nobody had taken a look at it, and I’m always hesitant to mindlessly tag folks on issues when I don’t feel like I’ve done the work to investigate (though to be fair, didn’t really know what “the work” should be in this case).</p>
<p>I’d ended up assuming that this bit of functionality just didn’t work with CSV datasets, and had been working around it, until I was presenting about arrow at <a href="https://www.meetup.com/nyhackr/events/295322075/">New York Open Statistical Programming Meetup</a>, and someone asked about it again. I take 1 user question as representative of 99 other people with the same issue who aren’t being so vocal about it, and felt like it needed to be fixed. I am unashamed to admit that I occasionally have the taste for a bit of melodrama, and publicly declared it to a few of my fellow contributors as “my white whale”, and so set out to find the source, even if it required me to delve deep into the guts of Arrow’s C++ libraries, a task which can often send me down endless rabbit holes and chasing red herrings (this sentence has become quite the nature park…)</p>
<p>My original exploration didn’t result in much useful - the arrow package does some cool things with R6 objects to binding them to Arrow C++ objects, but accessing the inner properties of these bound objects would mean manually creating print methods for every single one of them, and when you don’t know in which class the problem lies, this becomes, frankly, a massive pain in the arse. I still didn’t have enough to go on to take it to an Arrow C++ contributor and ask for their help, but showing I’d done some of “the work” to at least make an effort myself.</p>
<p>And then collaborative debugging saved me! I had a catchup with the fantastic Dane Pitkin, and I asked for his help just walking through the problem. Dane’s main contributions to Arrow have been to Python, though he has a ton of previous C++ experience, even if he isn’t a regular contributor to the Arrow C++ library. I walked through the problem with him, and the steps I’d taken so far to try to figure things out, and the fact that I still needed to figure out if the problem was in R or C++. Dane commented that the object bindings we’d been looking at had little surface area for the problem to be in R - most of them were straight-up mappings from the C++ object to an R6 object with no extension. This was my first big clue! I remembered that there’s a bit of <code>open_dataset()</code> where we do some manual reconfiguration of specified options, which involves a whole load of R code - something I’ll come back to later. Dane also suggested I check out Stack Overflow to see if people were complaining about the issue in C++ there. I was sceptical that I’d find anything - lots of these bugs are more often surfaced in the R and Python libraries - but realised that this wasn’t the dead end that I’d thought. It suddenly occurred to me that if I could reproduce the bug in PyArrow, then the problem must lie in the C++ library, but if I couldn’t, then the problem lay in the R code.</p>
<p>Fifteen minutes later, and I had confirmed it was an R problem. I happened to mention on Slack the problem I was having, steps I’d taken so far to investigate, and potential ideas to look at next, and ended up engaging in a bit more collaborative debugging, this time with the wonderful Dewey Dunnington, who mentioned more disparities between PyArrow and R in terms of how we construct schemas, which put me on the path of testing the schema values at different points in Dataset creation and able to rule that out. At that point, with a smaller problem space to explore, the only logical thing left to look into was the R code which sets up the options for the various Arrow classes, and I ended up spotting the <a href="https://github.com/apache/arrow/pull/37658/files#diff-c4ba5d2ce71a988d61b7d773689979d0be972fd3e717f204b407fc408f6d6955L478-L483">rogue instantiation of CSVReadOptions</a> which just needed to have the partitioning column excluded (it relates to the reading in of the individual files which make up the dataset, and so has no “knowledge” of the partitions, and so previously raised an error as it treated them as an extraneous column).</p>
<p>One pull request later, and the problem that I’d given myself a week to look at had been solved in less than a day! This is probably one of the most gratifying bugs I’d worked on all year; there was a user with a problem to solve, a bug which had been annoying me for ages, the chance to fall into the puzzle-like aspects of debugging, and some great opportunities for collaboration with folks whose help here I really appreciated. This is one of the things I enjoy most about being a software engineer; this process of starting off feeling entirely clueless about something, and having to work out where I need to be and how I’m going to get there, and then doing it. Actually, in the abstract, that’s probably one of the things I enjoy most about being a human :)</p>



 ]]></description>
  <category>R</category>
  <guid>https://niccrane.com/posts/debugging/index.html</guid>
  <pubDate>Tue, 03 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/debugging/ahab.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Three Goats in a Raincoat</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/goats/index.html</link>
  <description><![CDATA[ 




<p>I am not a fan of the term “imposter syndrome.” It’s a lazy way of ignoring the complex and interconnected, often structural reasons that contribute to many people’s feelings, which manifests itself in a variety of deeply idiosyncratic ways. But I guess the tl;dr is that this is what this post is about.</p>
<p>I am not someone who has “hobbies” as such; I have interests that I adopt with great enthusiasm, pursue obsessively for a short period of time, often declaring that I have found a lifelong fascination, and then drop once the initial feeling of “endless possibility” has worn off and something else shiny and new finds it way across my path. I suppose my hobby is “pursuing novelty.” The 2022-2023 edition of this came in the form of tabletop role-playing games, and earlier this year, I found myself sitting with some good friends, beers and snacks, working out how my character, “Ach!”, a small goat with a fondness for fainting at inappropriate moments <a href="https://rpggeek.com/image/4971174/goat-crashers">could make their way into a human party undetected</a>.</p>
<p>The solution for Ach! and friends was to don a disguise and stand on each others’ shoulders, and this image of 3 goats in a raincoat trying to sneak into a human party perfectly reflects how I feel about myself sometimes as an open source maintainer.</p>
<p>(Here, I need to get round to commissioning an image of 3 goats in a raincoat standing on each other’s shoulders. The top one has black and red braids and is wearing a hat and fake beard/moustache)</p>
<p>I am the current maintainer of the arrow R package, which in reality just means I am the person who is listed as such in the package DESCRIPTION file, and have the responsibility of clicking the link in the confirmation email from CRAN when someone submits the latest version of of the package to CRAN. Of course, I do more than just this; I triage bugs, submit patches, review PRs, and occasionally implement new features, but so do other people. While for career-serving purposes, I can technically claim to be “the” maintainer of the package, honestly, I am “a” maintainer and part of a team. This isn’t always reflected in other people’s language, and results in weird moments where people say things to me like, “ah, you wrote arrow!” and I have to respond with, “I absolutely did not, though I did write a lot of the bindings for dplyr::across!”, a topic which subsequently interests me more than it does them.</p>
<section id="the-tyranny-of-should" class="level2">
<h2 class="anchored" data-anchor-id="the-tyranny-of-should">The tyranny of “should”</h2>
<p>I’ve spent much of this year suffering from the tyranny of “should” regarding my own knowledge and abilities, in a way that has been verging on ridiculous. A lot of it is the perfect storm of adjusting to new responsibility, the deeply unhelpful way in which my self-image when I was younger was built up around being “smart” and “knowing things”, and a knack for punching above my weight by being good at figuring out just enough about a topic to get shit done. I don’t know every single detail of object orientation in R, but I know enough to be able to create new bindings between C++ objects and R6 classes in the arrow R package and expose their methods via fields and active bindings. Despite having looked it up repeatedly over the past few years, I still cannot recall the difference between how things work with static and shared libraries, but I did manage to fix a bug requiring me to bump the version of the C++ date library that Arrow vendors, via inspecting old pull requests and helpful feedback I received on the PR I submitted.</p>
<p>It came to a head at this year’s posit::conf, where I had the privilege of co-teaching a workshop about Arrow with the wonderful Stephanie Hazlitt. We spent months preparing materials and practicing teaching to our laptop screens, but when the event itself rolled around, teaching it to a room just shy of 60 people was a different experience entirely. It was intimidating being in front of a room of eager learners, and any jokey asides I was usually capable of making went out of the window, and I just taught the materials fairly plainly, stumbling over my words a bit, and finding the moments of silence in the room as I was teaching pretty awful. Subsequent feedback from folks I trust enough to deliver at least some honesty alongside their validation has led me to conclude that the only person who really noticed or cared about this was me. I was doing my old trick of snatching defeat from the jaws of victory, and realised later that my self-expectations were totally unreasonable. While I used to be able to absolutely smash through delivering a well-practiced 2-day “introduction to R” course, and delighted in engaging the folks in the room and showing them what they (and R!) were capable of, it’s 5 years since I last did that on the regular. This was the first time these materials had seen the light of day, and at no less than posit::conf, daunting enough on its own. And honestly, this is all ego. We ran a good workshop, people were engaged, and we wrote some quality reusable materials. Yes, there’s room for improvement, but overall it was solid. Delivery of content is something I can (and will) work on. I’ve applied for The Carpentries instructor training, and have plans to get back into the swing of teaching by running workshops (on Arrow and other topics) at user events.</p>
</section>
<section id="the-power-of-i-dont-know-but-i-can-find-out" class="level2">
<h2 class="anchored" data-anchor-id="the-power-of-i-dont-know-but-i-can-find-out">The power of “I don’t know but I can find out”</h2>
<p>The second day of posit::conf was spent being a teaching assistant for the fantastic Andy Teucher, who was teaching “Fundamentals of Package Development”. I managed to escape a lot of this “should” nonsense here, so when one of the course attendees asked me about where to store CSV files to use in unit tests, I happily admitted I wasn’t sure but could find out, and together we had a look in “Writing R Packages”, where I couldn’t find the information, and then suggested the approach I usually take when working on arrow - look at what folks who often define best practices do in the packages that they maintain. We took a look at readr, found the files in the testthat directory, and concluded that unless there’s reason to want to do anything more complicated (like make those datasets available to end users), then that approach is fine. Not knowing the answer instantly wasn’t a hindrance to working out the necessary solution. Learning how to say “I don’t know, but let’s find out together” is one of the most important things I learned when I was first teaching people how to use R. A teacher doesn’t have to know everything, but should be able to help a learner find the information they need.</p>
</section>
<section id="the-power-of-community" class="level2">
<h2 class="anchored" data-anchor-id="the-power-of-community">The power of community</h2>
<p>The rest of the conference week was pretty awesome. I was in the middle of a CRAN resubmission (well, actually a re-re-resubmission, but let’s not go there) which had got a bit hairy, and I needed some help tracking down the source of the bug. I spent some time briefly engaging in a bit of pair programming with Jonathan Keane and Neal Richardson, who’ve both been involved with Arrow for a lot longer than me, and I’m always taken aback by just how quickly they both get to the source of a problem any time I ask for help. Part of my “knowledge anxiety” manifests as me sometimes taking longer than I would like to process things when communicating verbally about technical topics, which leads to me getting really frustrated when I’m just not “getting” things in the moment that I know later will seem pretty obvious and uncomplicated. This happened when we were looking at the arrow bug, but I had this sudden moment of clarity upon realising…nobody cared except me. Jon and Neal are great collaborators and are always happy to explain things again if there’s time, and aren’t going to judge me for it.</p>
<p>I also realised that there is no universal measure of what I should know or where I should be at. While I always want to know more about how things work, I don’t have to know everything and it’s a pretty unrealistic expectation for me to have of myself; sure I can (and often do!) go read a whole load of the codebase and related concepts, but that’ll never be the same as also leaning on other people’s years of experience and knowledge. The whole point of being part of a community is to be able to share both overlapping and divergent knowledge.</p>
</section>
<section id="progress-is-power" class="level2">
<h2 class="anchored" data-anchor-id="progress-is-power">Progress is power</h2>
<p>I don’t think there is a universal solution to this problem of feeling like you “should” know more, but all I know is what has worked for me. Public work is important - social media, blog posts, talks, workshops, whatever. It can be scaled to wherever you’re at. There’s always something you’ll be surprised that you know but others don’t. And it creates a lovely feedback loop whereby a little bit of external validation can go a long way.</p>
<p>Learning is also important - I did the first half of the Udacity C++ Nanodegree this year, and while a lot of what it taught me was that I never want to be a full-blown C++ developer (I’d rather make weird buildings and spaceships out of existing Lego pieces than become a polymer scientist just to create custom bricks), realising that I could learn C++ at that level if I really wanted to, was invaluable. Part of the course involved getting acquainted with cmake, and whilst I can’t claim expertise there, dabbling in a bit of the whats and whys helped make many related Arrow project issues seem less mystical.</p>
<p>Reassurance and validation are good and well, but in my experience, having tangible proof of the things that I do know is more effective.</p>
</section>
<section id="fake-it-til-you-make-it-is-deeply-problematic" class="level2">
<h2 class="anchored" data-anchor-id="fake-it-til-you-make-it-is-deeply-problematic">“Fake it til you make it” is deeply problematic</h2>
<p>The commonly received advice is “fake it ’til you make it”. Pretend you feel like you belong and are confident, until that becomes the case. I’ve spent a long time attempting this, and the problem is that it doesn’t actually work, because it doesn’t address the underlying issue. It’s only since I started to own the fact that I don’t feel comfortable in every environment or domain and working out what I need to do to feel more comfortable that I’ve felt my confidence growing.</p>
<p>In the past month, I’ve been a lot more open about how I’ve been feeling around this. It’s been tricky as I’ve been scared that my vulnerability just looks weakness that I shouldn’t show around other people, or just come off as moaning, but it’s had massive benefits. During the first couple of days of posit::conf this year, I suffered the worst ongoing anxiety I’ve had all year - I had a constant knot in my chest - but despite that managed to have a good time as everyone was very accepting. I can say without a doubt that pretending to be fine would have made things infinitely worse.</p>
<p>There was another point during the conference when I casually mentioning that I was feeling quite hopeful about a potential opportunity but not entirely sure if it was in the bag, as I suspected I might be up against someone whose background I find impressive. It was kindly pointed out to me that each of us bring different things to the table, a comment which has since set off a chain reaction of me starting to appreciate what I can do rather than what I can’t.</p>
</section>
<section id="the-cure-for-imposter-syndrome" class="level2">
<h2 class="anchored" data-anchor-id="the-cure-for-imposter-syndrome">The cure for imposter syndrome</h2>
<p>The most important thing I learned this year is that the cure for imposter syndrome isn’t persuading yourself that you aren’t just 3 goats in a raincoat pretending to be a person, but instead surrounding yourself with folks who wouldn’t really care if you were anyway because goats are cool and that’s a pretty awesome feat of acrobatics and balancing.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://niccrane.com/posts/goats/index.html</guid>
  <pubDate>Mon, 02 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/goats/goats.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R package documentation - what makes a good example?</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://niccrane.com/posts/r-examples/index.html</link>
  <description><![CDATA[ 




<p>I’m currently working on adding to the documentation of the arrow R package, and I’ve started thinking about the qualities of good examples. Specifically, I’m referring to the examples included as part of function documentation. In my experience, the best way for me to achieve rapid familiarity with an R function I haven’t worked with before, or understand how to use a function about which I already understand the basics, is by having example code that I can run. In the book ‘R Packages’, Hadley Wickham <a href="https://r-pkgs.org/man.html#man-functions">remarks</a> that examples are “a very important part of the documentation because many people look at the examples first” and <a href="https://devguide.ropensci.org/building.html#general">rOpenSci recommend</a> that each of a package’s exported functions should be accompanied by examples.</p>
<p>In this blog post, I will explore the things that I believe make for good function examples in documentation, focussing mainly on R.</p>
<section id="what-good-looks-like-in-r" class="level2">
<h2 class="anchored" data-anchor-id="what-good-looks-like-in-r">What good looks like in R</h2>
<p>I asked people on Twitter for their opinions of good R package documentation in general, and <a href="https://twitter.com/_J_sinclair/status/1391677551261650945">Jonathan Sinclair</a> highlighted the ‘examples’ section from <a href="https://rdrr.io/cran/dplyr/man/case_when.html"><code>dplyr::case_when</code></a>, the beginning of which is shown below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/dplyr_case_when.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">(image from: https://rdrr.io/cran/dplyr/man/case_when.html)</figcaption>
</figure>
</div>
<p>I think Jonathan is spot on in his assessment. To paraphrase, the highlights for him are:</p>
<ul>
<li>there is next to no prose or intro</li>
<li>there are plenty of comments, as needed, to explain the examples</li>
<li>there is a variety of different examples</li>
<li>there are examples of what <em>not</em> to do.</li>
</ul>
<p>This kind of documentation appeals to my skim-reading self. If I’m trying to accomplish a task, sometimes I just want to run some code and see what happens to get an intuitive feel for what a function does. While I am fully prepared to slow down and read the rest of the documentation, a “quick win” motivates me to invest the additional effort. It tells me that the developers of this code have prioritised making things easy to understand and that the time I am investing will pay off.</p>
<p>I’ve been skimming through the documentation of some tidyverse and related packages - as I consider many of these to be well documented and easy to read. Here are some things I’ve observed which I think one can do to make function examples look great:</p>
<ul>
<li>include the most basic usage of a function</li>
<li>use very simple toy datasets or standard in-built datasets</li>
<li>demonstrate non-obvious behaviours of a function</li>
<li>demonstrate different parameter values/combinations where relevant</li>
<li>demonstrate any unusual parameters</li>
<li>demonstrate on different objects if appropriate</li>
<li>sometimes go beyond the use of an individual function to include common mini-workflows</li>
<li>group documentation and examples for similar functions together</li>
<li>include examples that may lead to unexpected results</li>
<li>include comments to explain examples</li>
<li>no examples for deprecated functions to discourage their use</li>
<li>no unpredictable external dependencies - <code>rvest::html_text</code> manually creates HTML to demonstrate capabilities rather than scraping an external site</li>
<li>sometimes showing the output when it adds to the example (e.g.&nbsp;<code>tidyselect::starts_with()</code> and many other examples from that package)</li>
<li>examples should be correct and run without error (unless intended to show erroneous output)</li>
</ul>
</section>
<section id="what-bad-looks-like-in-r" class="level2">
<h2 class="anchored" data-anchor-id="what-bad-looks-like-in-r">What bad looks like in R</h2>
<p>I am not intending to “name and shame” any package authors who haven’t included examples for their functions. It may have been overlooked, there may be plenty of explanation elsewhere, or they may have felt that the code was not sufficiently complex to require examples. It might be true that it seems obvious what a function does, but that makes assumptions about the users of your code that might not hold.</p>
</section>
<section id="what-good-looks-like-generally" class="level2">
<h2 class="anchored" data-anchor-id="what-good-looks-like-generally">What good looks like generally</h2>
<p>When reading through examples, one thing that struck me is that when I’m looking at Python docs in Jupyter Notebook (<a href="https://stackoverflow.com/questions/30855169/how-can-i-see-function-arguments-in-ipython-notebook-server-3">press shift + tab</a>), I also see the output of running the examples.</p>
<p><img src="https://niccrane.com/posts/r-examples/sklearn_docs.png" class="img-fluid"></p>
<p>Similarly, both examples and outputs are shown in the official docs for some libraries, for example, pandas.</p>
<p><img src="https://niccrane.com/posts/r-examples/pandas.png" class="img-fluid"></p>
<p>I think this is a helpful feature - less effort is required to see how a function works.</p>
<p>In R function documentation, runnable code is often included, but in most cases needs to be manually run by the reader to see the output. I’m torn as to whether this is good or not. On the one hand, it encourages you to run the code and get a more tangible feel for what it does and saves valuable space in the Viewer window in RStudio. On the other hand, it adds an extra manual step to your workflow and lengthens the time until that precious “quick win” of enlightenment when exploring a new function.</p>
<p>You get a lot closer to this on the website <a href="https://rdrr.io/">rdrr.io</a>, which indexes R package documentation and allows examples to be run inline. However, examples are run one after the other without the original code being displayed. So in the case of multiple examples, you have to match up the output to which example it is from.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/rdrr.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">(from https://rdrr.io/cran/dplyr/man/case_when.html)</figcaption>
</figure>
</div>
<p>Some packages include output as comments within their examples. For instance, the <code>tidyselect</code> package; here’s an example from <code>tidyselect::all_of</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://niccrane.com/posts/r-examples/tidyselect.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">(from https://rdrr.io/cran/tidyselect/man/all_of.html)</figcaption>
</figure>
</div>
<p>All that said, while the ability to see the output of examples is a nice-to-have, I don’t think it’s essential to good function documentation. With any piece of documentation, it’s necessary to consider the purpose; at a minimum, examples exist to tell the reader how to use a function, and you don’t need to see the output to do that.</p>
<p>Since I first wrote this, I found out that it is possible to easily <a href="https://blog.rstudio.com/2017/09/13/rstudio-v1.1-the-little-things/">run examples from help files by selecting them and then hitting Ctrl+Enter</a>, the same as running code in the Source pane.</p>
<p><img src="https://niccrane.com/posts/r-examples/execute_help.png" class="img-fluid"></p>
<p>Another thing I wasn’t aware of - <a href="https://pkgdown.r-lib.org/">pkgdown</a> - commonly used to automatically render docs for packages run examples and displays the output underneath. Check out the example below from the Arrow pkgdown site.</p>
<p><img src="https://niccrane.com/posts/r-examples/arrow_examples.png" class="img-fluid"></p>
<p>In conclusion, good examples make functions easier to work with and help readers of your documentation gain a deeper understanding of how a function works. While any examples are better than no examples, you can give your users the best chance of success when using your code with careful thought about the content of your documentation.</p>
<p>Huge thanks to everyone who responded to my Twitter thread, and to my fantastic colleague <a href="https://twitter.com/jorisvdbossche">Joris Van den Bossche</a> for reading the first draft of this, and our conversations about how things are done in R and Python.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Python</category>
  <guid>https://niccrane.com/posts/r-examples/index.html</guid>
  <pubDate>Mon, 17 May 2021 23:00:00 GMT</pubDate>
  <media:content url="https://niccrane.com/posts/r-examples/arrow_examples.png" medium="image" type="image/png" height="95" width="144"/>
</item>
</channel>
</rss>
